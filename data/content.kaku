====
NAME: HOME
HOST: home
BREF: This is the home of the website
BODY:

# Home

## Tools

- {./tools.html, "Philosophy"}
- {./kaku.html, "Kaku 書く", Kaku is a markup language}
- {./ronbun.html, "Ronbun 論文", Robun is a static site generator}
- {./keyboards.html, "Keyboards", The keyboards I use}

## Tracking

- {./tracking.html, "About tracking myself"}
- {./time.html, "Time tracker"}
- {./2019.html, "The year 2019"}

====

NAME: KEYBOARDS
HOST: tools
BREF: I use special keyboards to write and work
BODY:

# Keyboards

I use two keyboards: the *Happy Hacking Keyboard* (HHKB) by PFU and a *Happy Hacking Keyboard plate replica* made in China.

## Happy Hacking Keyboard

[media/hhkb.jpg, The happy hacking keyboard]

Bought in 2016 at Akihabara in Japan, this HHKB had been my daily driver since. It took several weeks to get used to it as I learned both to write in QWERTY and the very special layout of this keyboard. It's currently customised with a {https://kbdfans.com/products/pre-orderelectrostatic-capacity-keyboard-japanese-keycaps?_pos=16&_sid=098521c43&_ss=r, "japanese keyset"}. As for all HHKBs, the switches are Topre.

## HHKB plate replica

[media/hhkb-plate.jpg, My plate replica of HHKB]

Bought in 2018 to have a second keyboard with the HHKB layout to drop at work. This keyboard initially had a rough CNC cut plate with Outemu Purple switches. I unsoldered the switchs and replaced them with Cherry MX Silent Red. A friend also lubbed them to avoid making noise. A vinyl like sticker was then applied to the plate to hide the rough metal. 

====

NAME: KAKU
HOST: tools
BREF: Kaku is my own markup language.
BODY:

# Kaku 書く

Kaku (write) is my own markup language. It's inspired by Markdown with a few modification for quotes, links, images and lists handling. It was created to fit my needs and is currently used on this website.

This {https://github.com/Thomasorus/Kaku, "repositoty"} contains the detailed specs and a JavaScript parser for Kaku.

====

NAME: TRACKING
HOST: home
BREF: An explanation about why I track some stuff in my life
BODY:

# Tracking

I track time spent on my hobbies. First I hated the idea. I saw it as self-surveillance, as an intrusion of accounting and management in my personal space where precisely, you don't count your time.

After two months I realized I had the wrong feeling. Tracking hours has become a tool for self-discovery. It allows me to take a huge step back and to be more careful about my well-being. It also helps making connections between what I do and what I feel every day.

For example in the first two months of January, I spent a lot of time on Bas Gros Poing. I was doing web development but also editorial and podcast stuff. It was a lot of fun and by contrast, I think it deepened my disinterest for my daily job. It also explained the low motivation I felt.

For the first two months of 2020 I spent around 70 hours on personal projects. It's 7.8 hours a week, which means I overall worked a day more each week on personal stuff. It made me realize I was on the wrong path to accomplish one of my goals, which is to be less productive and more creative.

For people like me who wonders where their free time disapears, tracking time helps. My advice however, is to find a personal way of tracking time instead of using apps, bullet journals or stuff related to productivity. Finding your own way of tracking your own time is also part of the self-discovery thing.

To me tracking time doesn't mean trying to be more productive, but the opposite.

## Tracking...

- {./time.html, "My time on a week basis"}
- {./2019.html, "The year 2019"}

====

NAME: TOOLS
HOST: home
BREF: A collection of hardware and software tools I use or made
BODY:

# Tools

A collection of tools I use or made. 

## Why I make my own tools

As software developers we are all the time required to follow the next big thing and use new framworks or librarys. It comes with a loat of code bloat, it requires to relearn everything from scratch and does not favors building strong fundamentals. It's exhausting and maintains people into imposter syndrome.

Creating my own instead of using other people's tools is a very appreciable exercise of self-discovery. It allows to ask, ala Marie Kondo, if these tools I use all the time as a software developer brings me happiness. And if not, why do I keep using them?

Coding my tools removes the notion of efficiency and productivity associated with software development. I don't know when the tool I build will be done and it doesn't matter, that's why it's relaxing. Instead of complying with other people way of doing, I discover my own and my software evolves with me.

It's a reappropriation of the means of production towards self-discovery.

## Software

- {./kaku.html, "Kaku 書く", Kaku is a markup language} is my markup language
- {./ronbun.html, "Ronbun 論文", Robun is a static site generator} is my static site generator

## Hardware

- {./keyboards.html, "Keyboards", The keyboards I use} I use and customize

====

NAME: RONBUN
HOST: tools
BREF: Ronbun is my static site generator
BODY: 

# Ronbun 論文

Ronbun (paper) is my static site generator. It's build in nodejs and uses {/kaku.html, "Kaku"} as a markup language. It requires imagemagick on the server to process images. It also process time tracking and presents it as graphics.

Ronbun uses a `.kaku` file as a source of content and a text file for time recordings. It parses files and generates html. Ronbun and the {./kaku.html, "Kaku"} parser try as much as possible to provide light pages and assets by using standard HTML techniques like native lazyloading.

A rewrite of Ronbun should be done in the future in a another language to allow faster compilation time and lower requirements, possibly in Python or C.

====

NAME: NOW
HOST: home
BREF: About me
BODY:

I'm Thomas, a fighting game fan and web developer.

====

NAME: DEV TIPS
HOST: knowledge
Bref: A collection of html and CSS tips to build simple yet optimized websites
BODY:

# Html and CSS simple tips and tricks for your website

If you are reading this, your probably own a website but you're not sure about the quality of the html or CSS used in it. The goal of this page is to help you with basic yet super easy tricks to make your website accessible, readable by everyone and optimized for low bandwidth.

This tips and tricks are from on personal experience working as a frontend web developer for the last 5 years. It might not be perfect or 100% accurate. If you find any problem, please {/now.html, "contact me", go to my contact page}.

## About accessibility in this page

I will often refer to _accessibility_ in this page, which globally means having a website that people with disabilities can use. Disabilities come in a lot of ways. The most obvious one is blind people, who have to use a screen reader (the most recommended combination is {https://firefox.com, "Firefox"} with {https://www.nvaccess.org/download/, "NVDA"} on Windows) but there's a lot of handicaps that can give your a hard time on the internet.

You might be deaf, which means you need a transcribed version of an audio or video file. You might have dislexia, which means you have a hard time reading text and need special fonts (and surprisingly _Comic Sans MS_ is one of them). You might have anxiety and panic disorders, which means you can't go to some websites who are too cluttered. There are a lot of others handicaps that might make the web unusable. Coding properly for accessibility (basically, respecting standards) means allowing other tools to take over. Screen readers are the obvious ones, but others like screen readers also count.

But accessibility problems cannot be solved only by code. Some are only fixable by enforcing an inclusive interface and user experience design. You might have heard that enforcing accessibility leads to design constraints, which is true. But from experience it's entirely possible to have a nice design and user experience while being accessible. People saying it's not possible are lazy liars. Also you might have heard that enforcing accessibility is bad for SEO. It's also a lie as both can work together.

Respecting accessibility in UI and UX design often leads to a better designs and user experiences for all users. So when I say "It's good for accessibility" it often means it's good for all your users, so try to follow those advices.

## The basics of html

This section will give your some basic knowledge and tips about html, mostly what to use in what situation. 

### What you need to get started

You need this:

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>
```

You need to indicate that the document is html, the language of the document and of course its encoding. You also need a title as it will be visible in the tab and spoken by screen readers.

The `<meta name="viewport>"` is especially important. It can be used to block the zoom or dezoom of the page. But don't do it, please *never block the user from zooming or dezooming on a website*. This is the basic accessibility thing, don't deactivate it!

Of course there's a lot more that can go into the `<head>` of a website. Styles, scripts, meta-descriptions, open graph tags... The head has its own life in itself that you can explore, but it's not the purpose of this guide to give you an extended lesson about it so we'll skip it and start adding things inside the `<body>`.

### Divs and spans

Html is all about putting...things! Inside... other things? So your first reflex is probably to grab a `<div>` or a `<span>`, the good old ones! But what's the difference between them?

If you put several `<div>` one after the other, you'll see they stack one above the other. That's because a `<div>` has the `display:block;` CSS property by default. `display:block` makes the element start on a new line and take 100% of its container width.

If you do the same with `<span>`, they will stack one after the other. That's because a `<span>` has the `display:inline;` CSS property by default, which tells the element to start on the same line as the previous element and that its width and heigh are decided by content.

So just by knowing that, you already know how to stack things vertically and horizontaly. Great right?

### Wait wait wait... There's CSS in my html?

Yes! And for a good reason! Imagine your CSS file disapears and your are left only with your html page. Without some pre-made styling, everything would have the same font size, would be inline... That would be unreadable!

That's the reason why browsers implement their own styling when encountering an html element. It's a great feature but unfortunately, some people really hate it. When you want to style the html elements with your own design, you sometimes have to undo some of the basic styling of the browser.

And yes, some of them are verbose to undo, like buttons. That's the reason some people use what is called "resets" CSS files, to undo the default styling and ease the CSS work. 

But please be careful when resetting styles. When you undo the browser styling, you also undo accessibility styles. If you ever used the tab key to navigate inside a website, you saw that the focused element is distinguished from the rest with borders or outlines. Going too hard on de-style can break those things and left you with... nothing. You are lost.

Speaking of being lost, `<div>` and `<span>` can sometimes get your users in trouble, unlike the amazing _semantic html_ elements.

### What is semantic html?

When you use `int` or `string` in a programming language, you know exactly what each of them is doing and it helps in code readability right? Well html is the same, it has things with names that help knowing what they do. The problem  is, unlike a typed language, html is cool with you doing mistakes and won't throw an error if you don't use the right tool for the job. So in the end you can do mistakes and still have a visually working website who is awfull under the hood.

But visually impaired users use a lot of shortcuts with their screen readers to simply jump to different parts of the page, and those shortcuts only work if html is semanticly valid! So having good html and following a solid structure helps them, but also other users. For example, to use the reader mode in several browsers, your html has to be semanticly valid, or the reader mode won't be available.

There is a lot, _a LOT_ of semantic html elements and even I who loves html doesn't know them all, so I will only cover the most useful. 

### Content sectionning

These semantic elements have the same style properties as a `<div>` (they stack on top of each others) and won't change anything related to your design, so feel free to use them without stressing. You can even add them to an existing design without trouble!

You at least need those:

? `<header>` : Put the content from the top portion of your website that your user will read the first time they visit but will skip afterwards, inside this.
? `<nav>` : Put your navigation elements inside this. You can have several `<nav>` but you then need to use the `aria-label` attribute to name them for screen readers users.
? `<main>`: Put the main parts of your website inside this one. Very useful as it indicates to screen readers users they reached the main part of the page.
? `<article>` : Put the main content of your website inside this one. It must be content that is self-sustainable. Imagine if you had to remove everything one thing, and put it inside this tag.
? `<aside>` : put the content indirectly related to the article content inside this one. It can be a sidebar or a side note for example.
? `<footer>` : Put the content from the bottom portion of your website that your user will read the first time they visit but will skip afterwards, inside this.

A basic page might look like this for example:

```
<body>
    <header></header>
    <nav></nav>
    <main>
        <article></article>
        <aside></aside>
    </main>
    <footer></footer>
</body>
```

I did not mention the `section` element but it can be quite usefull if you need to split your content in different sections that are directly related to your content and that are of equal importance. For example a blog post should have its main content and comments inside `<article>`, but comments should be inside a `section` to make it clearer for screen readers users that the blog post has ended.

```
<main>
    <article>
        Blablabla
        <section aria-label="Comments"></section>
    </article>
</main>
```

You can find the other content semantic element on this {https://developer.mozilla.org/en-US/docs/Web/HTML/Element, "page"}.


#### Stop right there, what is this `aria` thing in the previous example?

You'll often see `aria` attributes inside the html code presented in this page. As stated by the MDN docs on this {https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA, "page"}, _Accessible Rich Internet Applications (ARIA) is a set of attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities._

Aria is a massive spec to learn and apply so I will just give you some basic ones in this page. Try to follow them as much as you can to give a better readability to your website layouts.


### Yeah, layouts! I want to align those semantic things!

There are parts that you can do just in html, and others that need CSS. *You can save dozens of lines of html by using 3 lines of CSS when you are doing layout*. So don't try doing all your layout only in html. You'll just have a hard time doing what you want and your markup will be ugly.

Layout examples will be given through this page, try to inspect them with your browser, reuse and tweak them to your needs. But first we need to adress something...

#### Don't use tables for layout

I'm gonna say it again. *Never use tables for layout*. I'm dead serious. Never do it.

If you come from the pre-html 5 era, you probably used to organize the elements of your page with tables because it was the norm. But using tables for something else that presenting data is a catastrophic thing for accessibility. When a screen reader meets a table, the screen readers tells him he's entering a table, so the user thinks he's going to hear about data organized in row and columns.

Also using tables makes your html super verbose, hard to read and hard to debug. They are way simplier solutions to do what most people try to do with tables.

### The `display` property

Here's a primer to help you get started width `display: ???`, the basic tool for doing layouts in html and CSS. As always there's a ton of values that can be used, but we'll just focus on the most common/usefull ones.

#### The good old ones

First the good old ones that you apply directly on each element.

? `inline` : Elements are stacked one after the other on the same line until there's no space so a new line is created.
? `block` : Elements are stacks on top of each other.
? `inline-block` : The best of both worlds as it acts like an inline element but its height and width can be changed!

#### Flexbox, the GOAT

A few years ago the massive adoption of flexbox was like a wet dream coming true. Imagine: you take the inline-block property where things stack right after each other, but you can decide the direction of this stacking both on the `x` and `y` axis ; and also how the elements behave between themselves!

The main difference comes from the declaration. Instead of declaring `display:flex;` on each element, you only declare it on the parent and it acts on the children.

```
<div style="display:flex;">
    <div>1</div>
    <div>2</div>
</div>
```

So how does that work? 

##### Decide the direction

First, you decide if the flow goes horizontaly or vertically, and in which direction. For this, you can use the great `flex-flow: ???;` shortcut property. Its most common options are:

? `row` : the children will be displayed from left to right
? `row-reverse` : the children will be displayed from right to left
? `column` : the children will be displayed from top to bottom
? `column-reverse` : the children will be displayed from bottom to top

You can also decide if the child elements should wrap aka create a new line when they lack to be on a single line, by adding `wrap` or `nowrap`.

Real code examples:

`flex-flow: row wrap;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`flex-flow: row-reverse wrap;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


`flex-flow: column wrap;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`column-reverse wrap`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

Neat right?

##### Align your children

Alignement is cool but what if you could decided the distance between those aligned children or even better, let the browser handle it for you? 

Let's reuse this example of a row going from left to right:

```
<div style="display:flex; flex-flow:row wrap;">
    <div>1</div>
    <div>2</div>
</div>
```

We're going to use `justify-content: ???;` to fine tune the way child elements behave between each others on the horizontal axis:

? `flex-start` : The default value, stack everything at the start of te flow.
? `flex-end` : Stack everything at the end of the flow.
? `center` : Stack all elements at the center with equal white space on the left and right.
? `space-between` : Space elements as far as possible from each others.
? `space-around` : Automatically gives each child element the same left and right margins.
? `space-evenly` : Creates equal white space between all elements.

Real code examples:

`justify-content: flex-start;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-start;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: flex-end;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-end;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: center;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-between;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-between;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-around;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-around;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-evenly;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-evenly;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


Now the cool thing is... The `align-items: ???;` CSS property takes the same values as `justify-content`, but for the vertical axis! Which means we have a way to align on the `x` and `y` axis in two lines of code!

It allows us to create the holy grail of alignment: center both vertically and horizontally in two lines of CSS! 

`justify-content: center; align-items: center;`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center; align-items: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

Praise flexbox! <span aria-hidden="true">(/≧▽≦)/</span>

There's a lot more you can do with Flexbox. You can align items individually, reorder items, decide if they are allowed to shrink or grow in size. If you want to learn more about Flex, try the in-game browser {https://flexboxfroggy.com, "Flexbox Froggy"}. If you are not into games try this free course on {https://www.youtube.com/watch?v=Vj7NZ6FiQvo&list=PLu8EoSxDXHP7xj_y6NIAhy0wuCd4uVdid&index=1, "youtube"}.

You might be thinking "Yeah this is cool, but not as cool as my good old tables". Well rejoice dear reader as I'm going to make you happy.


#### CSS Grid the almighty

CSS Grid is a relatively new spec that saw massive adoption from browser around the start of 2018 and is now used when Internet Explorer 11 support dropped. So what it is about?

Basically, it's about making virtual grids with columns and rows. You might have met 12 column grids in CSS frameworks like Bootstrap before? That's what Grid allows you to replicate in a few lines of code, except it's way more powerful and easy to use.

Even more than Flexbox, it's a _massive_ spec with tons of use cases and syntax tricks. It's extemely powerful but it's also easy to get lost in it, so we'll just try a few layouts and use cases to get you started with columns and rows.

##### So you like columns?

Let's say you want to replicate the good old 12 columns grid from Bootstrap. For this example we'll go with just 6 columns but it's basically the same. How would that work?

First we have to use `display: grid;` on the parent element, just like we did with flexbox. They we can declare our grid with the `grid-template-columns: ???;` property.

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

So let's break it down, what's going on here? The `repeat()` shortcut is a function we use to declare the number of columns we wanted instead of writing `1fr 1fr 1fr 1fr 1fr 1fr`. 

The `fr` is a CSS unit, like pixels or percentages, that means `fractional unit`. In this example, `1fr` repeated six times means "split the space in six and give each children the same space".

So what happens if we decide that the first column should take 2 times the space of other columns? The grid reajust itself nicely:

`grid-template-columns: 2fr repeat(5, 1fr);`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: 2fr repeat(5, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

But wait, what happens if there is not enough children? The grid keeps it's 6 column layouts and populate the 5 elements inside the 5 first columns:

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
</div>


If too many children, the grid will create a new row:

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
      <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">7</div>
    </div>
</div>

In Grid tutorials you will often hear about the "explicit" and "implicit" columns and rows. The explicit is the one you declared with your code. The implicit is the one created by the browser when there's no written rules to handle specific use cases or bugs.

Of course we could have a grid where columns have a fixed size in pixels. Doing so would ensure the columns keep a reasonnable size even on mobile, but it would make the whole thing un-responsive!

`grid-template-columns: repeat(6, 140px);`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="overflow:scroll;display:grid; grid-template-columns: repeat(6, 140px)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

At this point, you're probably thinking that a media query is needed to make the grid go from `fr` units to `px` units when the viewport is smaller. What a chore right ?...

Well dear reader I have something incredible for you...

<div style="display:flex; align-items:center; justify-content:space-evenly; margin:50px; text-align:center;"><span aria-hidden="true" style="white-space:nowrap;">(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧</span><strong>THE INCREDIBLE <br> MEGA AWESOME <br> NO MEDIA QUERIES <br> RESPONSIVE GRID</strong><span aria-hidden="true" style="white-space:nowrap;">〜(￣▽￣〜)</span></div>

`grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));`
<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(70px, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

Try rezizing it! Great right?! So what's happening here? 

- First, we removed the fixed number of columns in the `repeat` to let the child elements decide how much columns the grid should have.
- Then, we added the `auto-fit` property to let child elements grow in size (it can be replaced with `auto-fill` if you don't want your columns to grow)
- Finally, we added the `minmax` function that let us define what the minimum and maximum size the column should have. We set a pixel width at the minimum to forbid the columns to shrink too much, and a fractionnal unit as the maximum to allow them to take as much space as they want.


##### Ok but how do I position stuff?

In CSS frameworks like Bootstrap, you have utility classes to say "start here and span this much columns" and you can do exactly the same with CSS Grid, using the `grid-column: ? / ?;` shortcut property on the column of your choice. 

There's actually two syntax you can use:

? `? / ?` : Where the first `?` is the starting column and the second `?` is the ending column.
? `? / span ?` : Where the first `?` is the starting column and the `span ?` is the width of the column in `fr` unit.


Let's try different things with our grid:

```
grid-column: 1 / 5;
grid-column: 5 / span 2;
grid-column: 2 / span 4;
grid-column: 2 / span 1;
grid-column: 5 / span 1;
grid-column: 1 / 7;
```

Results in:

<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(70px, 1fr)">
    <div class="code-example-children-grid pattern-dots" style="grid-column: 1 /3">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 5 /span 2">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 2 /span 4">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 2 /span 1">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 5 /span 1">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 1 /7">
        <div class="code-example-value">6</div>
    </div>
</div>


##### Ok, what about the rows?

It's basically the same as the columns, except it's for the rows. Use the `grid-template-rows` to declare the number of rows you need. And of course, you can decide where to place each children using `grid-row`, the equivalent for rows of `grid-columns`. It's super useful for art directed pages as you can place everything where you want.

<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-rows: repeat(4, 1fr); grid-template-columns: repeat(6, 1fr);">
    <div class="code-example-children-grid pattern-dots" style="grid-row: 2 / span 1;">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 4 / span 1;">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 3 / span 1; grid-column: 6 / span 1;">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 2 / span 2; grid-column: 3 / span 2;">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 1 / span 4; grid-column: 5 / span 1;">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 1 / span 1; grid-column: 2 / span 1;">
        <div class="code-example-value">6</div>
    </div>
</div>

##### Is there a simplier way?

It can become messy to work this way, so one final tip for your: the best way to make complex layouts from row and grids is to use `grid-template-area: ???;` and `grid-are: ???;`, a very funky yet super useful syntax of CSS grid.

With this syntax, you "draw" your layout inside a string in CSS, declaring names for each of your child elements. Let's say we have 5 elements that we want to shape like a star. The result would look like this:

```
grid-template-areas: 
"lefttop . righttop"
". center . "
"leftbottom . rightbottom";
```

By doing this, we created a 3 by 3 grid. The `.` character inside the declaration means an element exists but has no name and thus, should be given empty space. Now all we have to do is report those names to our children and _ voila_:

<span class="visually-hidden">There is an hidden code demo below, please inspect it using the development tools.</span>
<div class="code-example code-example-grid-star" aria-hidden="true">
    <div class="code-example-children-grid pattern-dots" style="grid-area: lefttop;">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: righttop;">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: center;">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: leftbottom;">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: rightbottom;">
        <div class="code-example-value">5</div>
    </div>
</div>

##### I want MOAR!

If you want to train your CSS grid skills, try playing the amazing Grid Garden game on this {http://cssgridgarden.com/, "page"}. If you want more examples but in a sort of short video format, visit this {https://www.youtube.com/watch?v=DCZdCKjnBCs, "page"}. For a complete free video course on CSS Grid, I recommend {https://www.youtube.com/playlist?list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG, "this one"}.

*And that's it for modern layout in HTML and CSS!* 

Congratulations for reading thus far, that was a lot to take! Now let's talk about the content of your pages and about the elements you're going to use to format it!

### Common elements inside your layouts

So we have our page layout composed of semantic HTML elements. Now is the time to put some content. Text! Images! Videos! Titles! Links! We want it all!

#### Order your titles correctly

This one is simple, use `<h1>`, `<h2>`, `h3`, etc... Your page should at least have an `<h1>` and sould not jump from `<h1>` to `<h3>` without an `<h2>`. If you want a smaller title, use CSS but don't ruin the semantic for styling purposes! 

The reason why it is important is because screen readers users have shortcuts that allows them to jump directly to your titles. You can replicate this functionnality for all your users by adding an id and a hidden link to your titles. This way the user can click the title to add the id to the url, allowing sharing links to different parts of the same page.

This website actually uses this system. You can find the JavaScript function for this {https://github.com/Thomasorus/Kaku/blob/master/src/module.js#L179, "in the github repo of my parser"} {/kaku.html, "Kaku", Go to Kaku page}.


#### Make your links clear and accessible

Links are pretty straightforward, you put an `<a>` with an `href` attribute and you're good right? Yes, but often links lack readability due to poor phrasing. Try not using texts like "more" or "click here" outside of clear phrases, as they do not convey what's going to happen when you click. Try to have a different texts for each link. 

If you can't use a more contextualized text, then add the `title` attribute in the link with more context inside, and it will provide a tooltip when the user hover on the link. You will also have to add an `aria-label` attribute with the same contextualized text for screen readers. 

Inside those attributes, don't use the work "link". It's not explicit, it doesn't convey meaning. Also because screen readers already say "link", your screen readers visitors will hear "Link, Link".

Last but not least: if you use `taget="blank"` to open to a new tab, you have to vocalize it using the same `aria-label` attribute. Just add `(open in a new tab)` at the end of your text so screen readers users know that the previous page is still open.

So the end result might look like this:

```
<a href="/home.html" title="Go to the home page" aria-label="Go to the home page (open in a new tab)" target="blank">here</a>
```

Kwowing all this, it's often less work and trouble to just rephrase the link!

#### Organize your text content

Remember when I talked about the box-content semantic elements, the `<nav>`, `<main>` and others? Well there's a looot more of them for the text. If you care enough, you can probably find a semantic html element for anything. Here's a few that you should use:

##### text blocks with `<p>`

If you don't know what to use for your block of text, your probably need a paragraph. Paragraphs come with a natural margin that makes them readable even without adding style.

##### Citations with `<blockquote>`

The good old quote we often see in articles! It actually comes with the `<cite>` element and attribute to help you sources your quotes. Take a look at the specifications on {https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote/, "this page"} to make better quotes.

##### Lists with `<ul>`, `<ol>`, `<dl>`

If you enumerate something (text, links, etc...) you probably should add them in a list. Lists are useful for screen readers users as they are announced as a list with the total number of elements inside. Then when reading the list, the screen reader voices each element with its position.

`<ul>` with `<li>` inside creates an unordered list with bullets:

- Element A
- Element C
- Element Z

`<ol>` with `<li>` will create an ordered list with numbers for each element:

+ Element 1
+ Element 2
+ Element 3

`<dl>` is not very popular but is super useful as it's a definition list. Most people still use two columns tables for definitions, but this is way better for screen readers users. 

? Term 1 : Definition 1
? Term 2 : Definition 2
? Term 3 : definition 3

##### Preformated text with `<pre>`

If you have to present some code, it's probably good to wrap it inside a `<pre>` tag to preserve its formating. Please note that you should also use the inline semabntic `<code>` element (see further below).

##### Make breaks with `<hr>`

The `<hr>` element is to make indicate a break inside your content, a kind of pause, a change of subject. You could think that the old `<hr>` element is useless when we can style this breaks with CSS, but they indicate to screen readers users that they can take a break too!

#### All about images

Just as links, images can feel pretty straightforward. Put an `<img>` tag, an `src` and an `alt` attributes and you're good right?!

Well yeah but... what if we could do much more, like loading the right image size depending on viewport, let the browser decide between image formats or even only load images when they are in the viewport?

##### Load the right image size and density

The `<img>` element has an attribute name `srcset` that allows you to add several links to several versions of your image. You can do two things with `srcset`:

+ Ask the browser to change the image depending of the width of the viewport.
+ Ask the browser to change the image depending of the pixel density of the display.

In the example below, I have 4 versions of the same image that I want the browser to use when the viewport is less than 300, 600, 900 and 1200 pixels in width:

```
<img 
src="img-1200.jpg" 
srcset="img-300.jpg 300w, img-600.jpg 600w, img-900.jpg 900w, img-1200.jpg 1200w" 
/>
```

And for pixel density for 1k, 2k or 4k screens:

```
<img 
src="img-1k.jpg" 
srcset="img-1k.jpg 1x, img-2k.jpg 2x, img-4k.jpg x4" 
alt="this is an image"
/>
```

But you can also combine them, for example for a favicon:

```
<img 
src="icon32px.png"
"icon32px.png 32w, icon64px.png 64w, icon-retina.png 2x icon-ultra.png 3x icon.svg"
alt="this is an image"
/>
```

This way you are sure you only load the right size or density for your readers.

##### Load the right image format

You maybe saw it before and wondered what was the `<picture>` element good for? Well it's quite simple, it's used to contain several `<source>` elements and an `<img>` element. 

The `<source>` elements are used to give alternate versions of the same image. The most obvious usecase is to load several formats to allow to browser to pick the lighter if it supports it.

Let's take an example with a `jpg` and a `webp`. 

```
<picture>
    <source srcset="img1.webp" type="image/webp">
    <img src="img1.jpg" alt="this is an image" />
</picture>
```

If the browser supports the webp format, it will automatically use the webp file instead of the jpg. 

##### Lazy loading images

Lazy loading has become native in most browsers and is quite simple to use: `loading:"lazy"` on your `<img>` element and you are good to go. They are several ways of doing lazy loading for older browsers who don't support this feature. All of them require to use Javascript. If you want to support old browsers, take a look at this {https://css-tricks.com/the-complete-guide-to-lazy-loading-images/, "article"}.


##### Combine all this together!

But you don't have to choose between all these features, you can combine them to have images at the right size, of the best type, only loaded when in the viewport, and allt his only in html.

```
<picture>
    <source 
    type="image/webp" 
    srcset="img-300.webp 300w, img-600.webp 600w, img-900.webp 900w, img-1200.webp 1200w">

    <img 
    loading="lazy" 
    src="img.jpg" 
    srcset="img-300.jpg 300w, img-600.jpg 600w, img-900.jpg 900w, img-1200.jpg 1200w" alt="The happy hacking keyboard">
</picture>
            ```

Knowing that images are the most heavy thing loaded by websites, it's incredible that this syntax isn't more known.

#### Some basics on forms

Forms are incredibly complicated to get right from an accessibility standpoint. I don't know all the good practices but I've seen some bad ones that I can warn you about.

##### Forms require strict html

With more people validating forms with JavaScript, we've seen a deprecation of forms html quality. But the reality is quite simple: if you forget about some parts of the form, screen readers users will ne know they are in a form to begin with!

+ A form starts and ends with the `<form>` element even if you validate it with JavaScript. Also add an `id` to it.
+ Each `<input>`, no matter its type, needs and `id` and a `<label>` with the `for` attribute pointing to it. 
+ If you have a multi-section form, regroup them with the `<fieldset>` element and add the `<legend>` element as the "title" of this fieldset.
+ End your form with a `<button>` when you can, use the `for` attribute to point on the form's id, and use an `aria-label` to give more context.

For accessibility reasons:

- Use contextualized text for your labels, be precise about what each input is about! If you can't have a clear label, same as links: add a `title` attribute to the input as well as a `aria-label`.
- Don't rely on the `placeholder` attribute for examples of what is expected as the placeholder text is often hard to read and disapears once the input becomes active!
- If you want to add an example of what is expected from the user, you can either add it directly in the label (often not very accepted by designers) or add it below the input and then refer to it with the `aria-describedby` attribute (see example below). Using this, screen readers will first read the label, then the `aria-describedby` text.

Wrapping it up, here's an example:

<span class="visually-hidden">There is an form demo below, you can inspect it using the development tools.</span>
<form id="monsters">
  <fieldset>
    <legend>Choose your favorite monster</legend>
    <small id="error" style="color:red; display:none;">Error: you need to choose a monster.</small><br/>


    <input type="radio" id="kraken" name="monster" aria-describedby="kraken-desc">
    <label for="kraken">Kraken</label><br/>
    <small id="kraken-desc">The kraken is a kind of giant squid.</small><br/>

    <input type="radio" id="sasquatch" name="monster" aria-describedby="sasquatch-desc">
    <label for="sasquatch">Sasquatch</label><br/>
    <small id="sasquatch-desc">The Sasquatch is a kind of giant ape.</small><br/>

    <input type="radio" id="mothman" name="monster" aria-describedby="mothman-desc">
    <label for="mothman">Mothman</label><br/>
    <small id="mothman-desc">The Mothman is a kind of giant moth.</small><br/>
  </fieldset>
</form>
<button type="submit" form="monsters" value="Submit" aria-label="Validate the monsters form">Validate</button> 

That's it for the code, but more often than you think, bad forms are the result of non inclusive design practices, some of which we will see below.

##### Informations below forms

Ever filled a form and right under the validate button, seen a wall of text written in 10 pixels size that is actually the terms and conditions? Well that can be a problem!

Most forms end with words like _Continue_ or _Validate_ and by doing so, they suggest that the page is finished! A screen reader user can't know there's something else below. 

This problem can be super tedious to explain to designers as most of them don't want a wall of text before the form, and don't ever suggest this to a marketing team! So an accessible solution is to simply use an invisible anchor link pointing to the wall of text right before the form starts.

Screen readers users are humans too, they dislike walls of text about legal stuff like anyone else! This solution allows them to either read it or even better, skip it, like we all do _right?_

##### Don't put informations inside a form!

You probably already tried to tab between inputs in a form. That's because inputs are capturing elements that *you can only escape by using the tab key*. And when you do, *the tab key will lead you to the next natively focusable element* link another input, a button or a link. 

It's important because too many designers put big explanation texts about the form between inputs. Since screen readers users can only use the tab key to get out of an input and will land on the next focusable element, they will not have the explanation texts vocalized and have no way of access them. We saw that `aria-describedby` can be used to link a for to a descriptive text, but that's applying bandage on a broken leg.

Removing texts inside forms might seem like a chore and, when talking about it with designers, they will probably tell you it's a going to make the whole experience bland or suffocating in the case of massive forms. 

But the reality is that *a form that needs explanation texts between inputs is a bad design right from the start*. You should give all necessary information before filling the form, otherwise users might start filling it and realize in the middle they didn't have to, or are not concerned about it. 

Your labels with the descriptions attached should be enough.

##### Handling errors in forms is a pain

Handling errors in forms is super complicated and nobody seems to agree about how to do it correctly. It's especially hard with accessibility in mind, and not only because of screen readers. So take my advices with a grain of salt as I may be wrong on some cases and am still learning about this.

The first rule to respect is that triggering error messages should only happen either when the user tabs out of the input or when ther user validates the form. Don't trigger error messages while the user is typing. Wait for him to go out of the input or it will be a vocalized nightmare or a panic inducing behaviour. You might think that's counter-intuitive as screen readers users may not know that they wrote it wrong but that's actually ok if you do the following right.

When the user validates the form using the button, if an input is required and not filled or wrongly filled, move the user focus to this problematic input using the `.focus()` function in JavaScript. This way the user can promptly fill or fix it and go back below super fast to validate the form again.

To error message should be added the same way as the instructions, with an `aria-describedby`. You can actually have two `id` as a value for `aria-describedby`, so screen readers will read the label, then the description, then the error message.

For the sake of the example, imagine we did not choose a monster below and tried validating the form. In JavaScript, we should add the `error` id to each input's `aria-describedby` so screen readers can vocalize the error message, and remove the `display:none` from the error message itself so non-screen readers users can see it too.

<span class="visually-hidden">There is an form demo below, you can inspect it using the development tools.</span>
<form id="monsters">
  <fieldset>
    <legend>Choose your favorite monster</legend>
    <small id="error" style="color:red;">Error: you need to choose a monster.</small><br/>

    <input type="radio" id="kraken" name="monster" aria-describedby="kraken-desc error">
    <label for="kraken">Kraken</label><br/>
    <small id="kraken-desc">The kraken is a kind of giant squid.</small><br/>

    <input type="radio" id="sasquatch" name="monster" aria-describedby="sasquatch-desc error">
    <label for="sasquatch">Sasquatch</label><br/>
    <small id="sasquatch-desc">The Sasquatch is a kind of giant ape.</small><br/>

    <input type="radio" id="mothman" name="monster" aria-describedby="mothman-desc error">
    <label for="mothman">Mothman</label><br/>
    <small id="mothman-desc">The Mothman is a kind of giant moth.</small><br/>
  </fieldset>
</form>
<button type="submit" form="monsters" value="Submit" aria-label="Validate the monsters form">Validate</button> 


Because of all this and contrary to popular practices, *you should never disable a form button*, even if the user made errors or did not finish filling the form. If the validation button is disabled, the user has to travel through the whole form to find which input is not good, which is less practical than sending him directly there when the button is clicked.

Applying this can be tricky on legacy applications that handle errors in a monolytic way. Even if you do frontend surface level error checking, the user might make a typo that can only be identified when the form is sent and the backend discovers it by using informations stored in a database for example. If this happens, the error handling in the backend needs to be written in a way that returns which information is wrong, to allow the frontend to `.focus()` on the wrong input. 

If the backend returns a vague message then the frontend can't do anything outside using `.focus()` to move the user to a standard error message, and the user has to redo the entire form and find by himself what he did wrongly. This is a super bad user experience.

The best solution is of course to do error checking on the backend on each input with an ajax call right after the user finished completing it. But for various reasons going from time to cost of requests, it's not always possible.


#### The inline semantic elements

What's the difference between the text semantic elements and the inline semantic elements? Well the first ones are still used to structure your content, but the second ones are used to indicate more precisely what the text inside is about.

This is often complicated to add if you use a CMS or a markup language like Markdown as they don't give syntaxic shortcuts for most of them, so you have to write them by hand. 

Favor these semantic elements when working for very specific projects where text cannot always convey all the meaning by itself. If you have a design system, incorporating could probably be easier too.


##### Next match: `<strong>` versus `<b>` versus `<em>` versus `<i>`

Here we are, at the doors of the great war of semantic inline elements. So who's right between `<strong>` and `<b>`? Who wins between `<em>` and `<i>`?

Well, they all win.

Everyone is a winner excepts us the developers who have to implement this. Let's try to explain this strange situation. 

Imagine a website for a touristic area with a cliff:

- The `<b>` tag is used to draw the reader's attention. So it should draw attention to the cliff: "This wonderful area has a forest but also a <b>wonderful cliff</b>".
- The `<strong>` tag is to indicate the importance and seriousness of something. So it should warn people about the cliff: "Please be carefull near the cliff as *there are no ramps to prevent you from falling and the winds are strong*".
- The `<i>` tag is used to indicate that something is set off from the normal prose. For example it should be used for the foreign name of the cliff: "This cliff name is <i>mh'irr'la</i>" or the thoughts of someone thinking about the cliff: "<i>Is the cliff really in love with me or is it just a farce?</i> thought Jonathan".
- The `<em>` tag is used to stress something on the subject, almost as if you speak it aloud. So it should help denote something about the cliff: "Ah yes, the _cliff_, the one that is actually 2 meters tall".

I hope it makes sense. The sad reality is that no one writes prose in HTML, so you'll probably be stuck with whatever the wysiwyg editor or markup language parser of your choice decided to use. For example this page is written using {/kaku.html, "Kaku", Go to Kaku page} who compiles to `<strong>` and `<em>` by default. 

#### What about `<button>` and `<a>`?

For most document type websites the question between links and buttons doesn't really exist. But in application type websites, it's often that developers don't pick the right one or that designers make links look like buttons. 

So to make it clear:

- An `<a>` is for a page change or a new tab. When changing page, a screen reader user will be automatically moved to the top of the page and will start reading it from there.
- A `<button>` is for activating something like a modal or a form. Once pressed, even if things change in the page, it doesn't move a screen reader user somewhere else and it doesn't vocalize anything.

This difference of behavior is super important, especially in single page JavaScript web applications where urls are changed dynamically, but no page change is triggered in the browser! When such a case happen, the developer has to manually move the focus of the screen reader user to the next point of interest inside the app and vocalize what happened and where the user is.

To do this, the developer has to use the `.focus()` function in JavaScript. I'm not 100% sure about how to vocalize the page change so I'm not gonna give any advice on this. If you know good practices please {now.html, "contact me", Go to my contact page} so I can update this part.

One last thing: I don't care about your reasons, donc replace a `<button>` by a `<div>`.



#### Some cool html interactive elements

You might not know these but they can be super useful. Their main default is that they are sometimes hard to style properly.

? `<details>` and `<summary>` : Allows you to make a kind of accordion box in pure html. By default closed but the `open` attribute on `<details>` can make it open.
? `<datalist>` : Can be used as an input with a list of options auto-suggested by what the user is typing.
? `<progress>` : A progress with several attributes for showing progress. It's very hard to style correctly but you can have the same accessibility by using the `role="progressbar" on a div.

Note that you can't animate the reveal:

<details>
  <summary>Click me for a code demo</summary>
  [media/dio.jpg, You though it was code but it was me Dio!"]
</details>

A datalist can be usefull but requires a full form, which is quite a lot of code:

<label for="jojolist">Choose a Jojo character from this list:</label><br>
<input list="jojo" id="jojolist" name="muchJojo" />
<datalist id="jojo">
  <option value="Jonathan">
  <option value="Joseph">
  <option value="Jotaro">
  <option value="Josuke">
  <option value="DIO">
</datalist>


A progress bar using `<progress>` has this look:

<progress aria-valuenow="20" aria-valuemin="0" aria-valuetext="Step 2: Copying files... " aria-valuemax="100" style="display:block; width:100%;">20 %</progress>


Use the `role="progressbar" to style it more easily:

<div style="border:1px solid black">
<div role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" class="pattern-dots" style="width:20%; text-align:center;">20 %</div>
</div>

#### Other kinda useful semantic elements

Speaking about unavailable elements, those could be usefull in some contextx but will mostly have to be added by hand:

? `<abbr>` : Stands for abbreviation. Can be used for currencies for example.
? `<code>` : For code, obviouslym, often best used with `<pre>`.
? `<time>` : For time values of course.
? `<mark>` : To highlight some parts of your text.
? `<s>` : Strikes the text to indicate it's no longer relevant. Don't confuse it with `strike` who just strikes the text for... design?
? `<del>` & `<ins>` : If you have an edit to make to a text and want to keep trace of the change `<del>` and `<ins>` are a good pick!

#### End it where it started: tables

There isn't a lot about tables that is not already well kwnown. For accessibility you might want to be carefull of a few things.

The `<caption>` element should be added to all your tables as sort of title for this table. It will inform all users what the table is about: `<caption>I'm a table title!</caption>`.

Use the `scope="col"` on your `<th>` columns to explain to screen readars that the element is a the start of the column and `scope="row"` for the same `<th>` elements that start rows.

If you need to make more complicated tables accessible, try take examples in the MDN documentation on this {https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Advanced#Tables_for_visually_impaired_users, "page"}.


## Final words

I'm tired.


====

NAME: 2019
HOST: tracking
BREF: All things I read, watched in 2019
BODY:

# 2019 Overview

## Readings of 2019

All the things I read in 2019.

`...` Means the series is still ongoing but that I started it in 2019

### Novels

- The Remembrance of Earth's Past trilogy - Liu Cixin
- The unfathomable depth of loneliness - Hao Jinfang
- The Book of the New Sun Vol.1 - Gene Wolf 
- Viking Mythology - Neil Gamain

### Mangas

- Beastars...
- Vinland Saga...
- Kingdom...
- Yagate Kimi ni Naru (Bloom into You)
- Shamo
- Sun Ken Rock
- Kusuriya no Hitorigoto...
- Goblin Slayer...
- Blame! (reprint)
- Aposimz...
- No gun's life...
- At the Mountains of Madness (Lovecraft by Gou Tanabe)
- In the abyss of time (Lovecraft by Gou Tanabe)
- Shishunki Renaissance! David-kun
- Gunnm (reprint)
- Gunnm Last Order
- Gunnm: Mars Chronicles...
- Blue Giant
- Saltiness

### Comics

- Shangri La
- Mecanique Céleste

### Art books

- Gustave Doré (Catalogue d'exposition Gustave Doré - Musée d'Orsay)
- Katsuya Terrada Real Size

### Magazines

- L'étiquette 1 & 2
- Atom Magazine

### Notable articles

- {https://www.newyorker.com/magazine/2019/12/16/how-william-gibson-keeps-his-science-fiction-real, "How William Gibson Keeps His Science Fiction Real"}
- {http://paulgraham.com/genius.html, "The Bus Ticket Theory of Genius"}
- {http://www.slate.fr/story/184164/boulangeries-guerre-culturelle-pain-adieu-baguette-disparition-petit-commerce, "La France du pain est coupée en deux"}
- {https://www.nytimes.com/interactive/2019/11/16/world/asia/china-xinjiang-documents.html, "Absolutely No Mercy: Leaked Files Expose How China Organized Mass Detentions of Muslims"}
- {https://www.forbes.com/sites/johnkoetsier/2019/09/02/hong-kong-protestors-using-mesh-messaging-app-china-cant-block-usage-up-3685/, "Hong Kong Protestors Using Mesh Messaging App China Can't Block"}
- {https://matthiasott.com/articles/into-the-personal-website-verse, "Into the Personal-Website-Verse"}
- {https://www.gamekult.com/actualite/une-petite-histoire-du-jeu-de-baston-en-dix-morceaux-3050819125.html, "Une petite histoire du jeu de baston en dix morceaux"}
- {https://www.newyorker.com/magazine/2019/04/08/the-day-the-dinosaurs-died, "The Day the Dinosaurs Died"}
- {https://kotaku.com/how-biowares-anthem-went-wrong-1833731964, "How BioWare's Anthem Went Wrong"}

## Writings of 2019

All the things I wrote in 2019.

### Wrote

- {https://www.redbull.com/fr-fr/evo-2019-tournois-esport-infos, "L’EVO 2019, le plus gros tournoi esport du monde"}
- {https://www.redbull.com/fr-fr/lethal-league-blaze-esport, "Lethal League Blaze, l’autre jeu de combat qui ne dit pas son nom"}
- {https://www.redbull.com/fr-fr/samurai-shodown-esport-jeu-combat, "Samurai Shodown, l’original outsider de l’esport baston"}
- {https://twitter.com/Thomasorus/status/1144623832587821056, "Embrasser, étendre, étouffer le podcast"}
- {https://basgrospoing.fr/fr/articles/la-schizophrenie-street-fighter-iii-third-strike, "La schizophrénie Street Fighter III: Third Strike"}
- {https://www.redbull.com/fr-fr/mortal-kombat-pro-kompetition, "Premières fatalities sur Mortal Kombat XI"}
- {https://www.redbull.com/fr-fr/rza-mortal-kombat?linkId=65552039, "RZA : une main de velours dans un gant de ninja"}

### interviewed

- {https://twitter.com/Vincent_Jule/status/1144341580771409921, "Samurai Shodown: Le retour d'une franchise culte... et un nouvel âge d'or du jeu de combat?"}

### Published

- {https://basgrospoing.fr/fr/articles/theorie-ruissellement-jeu-de-combat-esport, "Trickle-Down Economics in the FGC and E-Sports"}

### Played

- Flappy Fighter
- Untitled Goose Game
- Mortal Kombat XI
- Samurai Shodown 2019
- Apex Legends
- Furi
- Thumper
- Céleste
- Hollow Knight
- The Red Strings Club
- Tekken 7
- Disco Elysium
- A Plague Tale: Innocence

### Coded

- {https://podcastouvert.fr/, "Podcast Ouvert"}
- {https://claviers-mecaniques.fr/, "Claviers mécaniques") - Frontend
- {https://happy-tereshkova-b21ae0.netlify.com/, "Art Eater"}
- {https://github.com/Thomasorus/Podcast-player, "A podcast player"}
- {https://github.com/Thomasorus/UI-concept-tests,"Some concepts for UIs"}
- {https://github.com/Thomasorus/wiki-engine, "My wiki engine"}
- A ton of interfaces at work with accessibility
- Web components with accessibility

## Watched in 2019

All the things I watched in 2019.

... Means the series is still ongoing but that I started it in 2019

### Anime

- Carole & Tuesday
- Sailor Moon S1 (original show)

### Movies

- Promare

### Documentaries

- 10 years with Hayao Miyazaki

### Series

- Mindhunter

### Tv shows

- Terrace House

### Notable videos

- How Mind Control Saved Oddworld: Abe's Oddysee
- The Real Fake Cameras Of Toy Story 4


====

NAME: EMPTY AND FULL
HOST: Stories
BREF: A story about flowers and brambles
BODY:

# Empty and Full

The story of *Empty and Full* narrates how {./the-first-one.html, "The First One"}, an immortal being tries to restore balance in an universe he subverted. The whole saga is divided into three major stories: Eat The World, Boxes Filling Space and a third unknown story.

Globally, *Empty and Full* is used a playground to experiment storytelling and painting, but also to question personal philosophical interrogations.

====

NAME: THE FIRST ONE
HOST: empty and full
BREF: The first one is the main character of Empty and Full
BODY:

# The First One

The *First One* is the main protagonist of {./empty-and-full.html, "Empty and Full"}.

## Eat The World

He was born onto one of the {./flower-houses.html, "Flower Houses"} and as the only descendant of his family, the direct heir to inherit a Flower House. His mother died giving him birth, making his father resent him. He grew in solitude and was given a strict education that left him without space to breathe.

At the {./age-of-trial.html, "Age of Trial"}, he was sent to war, like all others of his kind. As the only heir of his family, he should been given a secure position during his two cycle service. Unfortunately, his father opponents maneuvered to place him in the battlefield, hoping for its death and the possibility to inherit his family's Flower House.

During his two cycles service, The First One managed to survive all the battles he was sent to. He made a lot of companions among the Brambles Folks, broadened his horizons and developed a profound anti-war and anarchist attitude. Unfortunately, he was injured during his last battle at the end of his two cycles service. He lost his two arms and was heavily disfigured. Not capable of fighting, he was sent home where he discovered died not long ago.

Not willing to have children and incapable of handling most political and administrative tasks he inherited with the Flower House, he called his ancient war companions for help. As law forbids to inherit a Flower House when its owner is still alive, The First One organized its own as an anarchist organization and drafted a testament where he gave away everything he had to its group.

After a few years later, once all the talks about his political choices disminished, he announced to his closest companions his will to free all the slaves living on his Flower House. By doing so, he hoped it would encourage a more global slave revolution on the other Flower Houses. He also said his Flower House should be open to anyone and that it's wealth should be shared with the Brambles Folk.


====

NAME: AGE OF Trial
HOST: Empty and full
BREF: The explanation about the age of trial
BODY:

# Age of Trial

The Age of Trial is the age kids are sent to participate into the War on Brambles. They have to serve for two cycles before going home. Depending on their social standing they are given different roles. The most fortunate are given strategist and secure positions to ensure their families won't lose them. The common people are trained to battle and a lot of them never goes back home.


====

NAME: IT EATS THE World
HOST: Empty and full
BREF: The first part of the empty and full series
BODY:

# Eat The World

It Eats the World is the first arc of {./empty-and-full.html, "Empty and Full"}. It tells the story of several beings led by The First One, a creature betrayed by its kind seeking revenge. As he refused to be taken to eternal rest by its own God so he could take revenge, he concluded a pact with The Brambles and became an enslaved immortal.

As both the vessel and slave of The Brambles, he then proceeded to recruit other outcasts and shared his powers with them. Together they started a general war with the goal of destroying void itself by filling it with The Brambles.


====

NAME: FLOWER HOUSES
HOST: Empty and full
BREF: FLower houses are giant flower capable of containing entire populations
BODY:

# Flower Houses

Flower Houses are gigantic habitable flowers. They mostly belong to wealthy families, who use the light and warmth to grow food and medicinal plants. As it's almost impossible to grow anything into the Brambles, Flower Houses provide a massive amount of the global food consumed.

Products from the flowers themselves or their leaves are also used to create luxurious goods, rare medicine and elaborate clothing. Most Flower Houses rely on enslaved Bramble Folks for their workforce, promising them a better life, sunlight, absence of war.

====

NAME: FLOWER HARVESTERS
HOST: Empty and full
BREF: FLower harvesters are a cast specialized in finding flower houses
BODY:

# FLower harvesters

FLower harvesters are a cast of specialized biologists trained to art of survival in the brambles. Most of the time, they are hired for many years by privilegied individuals looking for new flower houses. When they find a potential flower house, they note its location by going at the top of the brambles and looking at the starts. Then they rate the flower chance of survival and if it can't survive or grow big enough to form a new house, they harvest it or leave it alone.

The hunters are easily identified by their full black clothing, their strange mask or their darkened skin color. Hunters are also a rarety. They require several years of education before being able to explore the brambles and a lot of them die in their first years. Despite what most people think, they are not a cult and don't worship any specific god. They also don't obey any flower governement, as there's no governing entity in the brambles.

FLower harvesters all share the basic same equipment:

- Shears, saws and blades to cut brambles and going forward
- Full black clothes to avoid being detected
- Localisation and mapping tools compass, paper maps and sextans
- Hunting tools : bow and arrows, traps
- A portable greenhouse where they repot small flower they harvested (to be resold later)

The rate of flower discovery has been increasing as hunters became more efficient in their survival craft. But not the rate of habitable flowers remain low. The last discovered flower house was 317 units ago.

====

NAME: THE BRAMBLES
HOST: Empty and full
BREF: The brambles are a mythological plant asserving the world of Empty and Full
BODY:

# The Brambles

The brambles are a mythological plant asserving the world of Empty and Full