====
NAME: HOME
HOST: home
BREF: This is the home of the website
BODY:

# Home

## Tools

- {./tools.html, "Philosophy"}
- {./kaku.html, "Kaku 書く", Kaku is a markup language}
- {./ronbun.html, "Ronbun 論文", Robun is a static site generator}
- {./keyboards.html, "Keyboards", The keyboards I use}

## Tracking

- {./tracking.html, "About tracking myself"}
- {./time.html, "Time tracker"}
- {./2019.html, "The year 2019"}

====

NAME: KEYBOARDS
HOST: tools
BREF: I use special keyboards to write and work
BODY:

# Keyboards

I use two keyboards: the *Happy Hacking Keyboard* (HHKB) by PFU and a *Happy Hacking Keyboard plate replica* made in China.

## Happy Hacking Keyboard

[media/hhkb.jpg, The happy hacking keyboard]

Bought in 2016 at Akihabara in Japan, this HHKB had been my daily driver since. It took several weeks to get used to it as I learned both to write in QWERTY and the very special layout of this keyboard. It's currently customised with a {https://kbdfans.com/products/pre-orderelectrostatic-capacity-keyboard-japanese-keycaps?_pos=16&_sid=098521c43&_ss=r, "japanese keyset"}. As for all HHKBs, the switches are Topre.

## HHKB plate replica

[media/hhkb-plate.jpg, My plate replica of HHKB]

Bought in 2018 to have a second keyboard with the HHKB layout to drop at work. This keyboard initially had a rough CNC cut plate with Outemu Purple switches. I unsoldered the switchs and replaced them with Cherry MX Silent Red. A friend also lubbed them to avoid making noise. A vinyl like sticker was then applied to the plate to hide the rough metal. 

====

NAME: KAKU
HOST: tools
BREF: Kaku is my own markup language.
BODY:

# Kaku 書く

Kaku (write) is my own markup language. It's inspired by Markdown with a few modification for quotes, links, images and lists handling. It was created to fit my needs and is currently used on this website.

This {https://github.com/Thomasorus/Kaku, "repositoty"} contains the detailed specs and a JavaScript parser for Kaku.

====

NAME: TRACKING
HOST: home
BREF: An explanation about why I track some stuff in my life
BODY:

# Tracking

I track time spent on my hobbies. First I hated the idea. I saw it as self-surveillance, as an intrusion of accounting and management in my personal space where precisely, you don't count your time.

After two months I realized I had the wrong feeling. Tracking hours has become a tool for self-discovery. It allows me to take a huge step back and to be more careful about my well-being. It also helps making connections between what I do and what I feel every day.

For example in the first two months of January, I spent a lot of time on Bas Gros Poing. I was doing web development but also editorial and podcast stuff. It was a lot of fun and by contrast, I think it deepened my disinterest for my daily job. It also explained the low motivation I felt.

For the first two months of 2020 I spent around 70 hours on personal projects. It's 7.8 hours a week, which means I overall worked a day more each week on personal stuff. It made me realize I was on the wrong path to accomplish one of my goals, which is to be less productive and more creative.

For people like me who wonders where their free time disapears, tracking time helps. My advice however, is to find a personal way of tracking time instead of using apps, bullet journals or stuff related to productivity. Finding your own way of tracking your own time is also part of the self-discovery thing.

To me tracking time doesn't mean trying to be more productive, but the opposite.

## Tracking...

- {./time.html, "My time on a week basis"}
- {./2019.html, "The year 2019"}

====

NAME: TOOLS
HOST: home
BREF: A collection of hardware and software tools I use or made
BODY:

# Tools

A collection of tools I use or made. 

## Why I make my own tools

As software developers we are all the time required to follow the next big thing and use new framworks or librarys. It comes with a loat of code bloat, it requires to relearn everything from scratch and does not favors building strong fundamentals. It's exhausting and maintains people into imposter syndrome.

Creating my own instead of using other people's tools is a very appreciable exercise of self-discovery. It allows to ask, ala Marie Kondo, if these tools I use all the time as a software developer brings me happiness. And if not, why do I keep using them?

Coding my tools removes the notion of efficiency and productivity associated with software development. I don't know when the tool I build will be done and it doesn't matter, that's why it's relaxing. Instead of complying with other people way of doing, I discover my own and my software evolves with me.

It's a reappropriation of the means of production towards self-discovery.

## Software

- {./kaku.html, "Kaku 書く", Kaku is a markup language} is my markup language
- {./ronbun.html, "Ronbun 論文", Robun is a static site generator} is my static site generator

## Hardware

- {./keyboards.html, "Keyboards", The keyboards I use} I use and customize

====

NAME: RONBUN
HOST: tools
BREF: Ronbun is my static site generator
BODY: 

# Ronbun 論文

Ronbun (paper) is my static site generator. It's build in nodejs and uses {/kaku.html, "Kaku"} as a markup language. It requires imagemagick on the server to process images. It also process time tracking and presents it as graphics.

Ronbun uses a `.kaku` file as a source of content and a text file for time recordings. It parses files and generates html. Ronbun and the {./kaku.html, "Kaku"} parser try as much as possible to provide light pages and assets by using standard HTML techniques like native lazyloading.

A rewrite of Ronbun should be done in the future in a another language to allow faster compilation time and lower requirements, possibly in Python or C.

====

NAME: NOW
HOST: home
BREF: About me
BODY:

I'm Thomas, a fighting game fan and web developer.

====

NAME: SITE TIPS
HOST: tools
Bref: A collection of html and css tips to build simple yet optimized websites
BODY:

# Html and CSS simple tips and tricks for your website

If you are reading this, your probably own a website but you're not sure about the quality of the html or css used in it. The goal of this page is to help you with basic yet super easy tricks to make your website accessible, readable and optimized.

This tips and tricks are from on personal experience working as a frontend software developer for the last 5 years. It might not be perfect or 100% accurate. If you find any problem, please {/now.html, "contact me", go to my contact page}.

## About accessibility in this page

I will often refer to _accessibility_ in this page, which globally means having a website that people with disabilities can use. Disabilities come in a lot of ways. The most obvious one is blind people, who have to use a screen reader (the most recommended combination is {https://firefox.com, "Firefox"} with {https://www.nvaccess.org/download/, "NVDA"} on Windows) but there's a lot of handicaps that can give your a hard time using the internet.

You might be deaf, which means you need a transcribed version of an audio file. You might have dislexia, which means you have a hard time reading text and need special fonts (and surprisingly _Comic Sans MS_ is one of them). You might have anxiety and panic disorders, which means you can't go to some websites who are too cluttered. There are a lot of others handicaps that might make the web unusable. Coding properly for accessibility (basically, respecting standards) means using a set of rules that others tools you might not know use to take over the web limitations. The reader mode in most browsers is a good example, screen readers too.

All of these accessibility problems cannot be solved by code. Some are only fixable by inclusive interface and user experience design. You might have heard that enforcing accessibility leads to design constraints, which is true. But from experience it's entirely possible to have a nice design and user experience while being accessible. People saying it's not possible are lazy liars. Also you might have heard that enforcing accessibility is bad for SEO. It's also a lie as both can work together.

 Respecting accessibility in UI and UX design often leads to a better user experience for all users. So when I say "It's good for accessibility" it often means it's good for all your users, so do it.

## The basics of html

This section will give your some basic knowledge and tips about html, mostly what to use in what situation. 

### What you need to get started

You need this:

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>
```

The `meta name="viewport"` is especially important. It can be used to block the zoom or dezoom of the page. *Never block the user from zooming or dezooming on a website*. This is the basic accessibility thing, don't deactivate it!

Of course there's a lot more that can go into the `head` of a website. Styles, scripts, meta-descriptions, open graph tags... The head has its own life in itself that you can explore, but it's not the purpose of this guide to give you an extended lesson about it so we'll skip it and start adding things inside the `body`.

### Divs and spans

Html is all about putting something inside something, so your first reflex is probably to grab a `div` or a `span`, the good old ones! But what's the difference between them?

If you put several `div` one after the other, you'll see they stack one above the other. That's because a `div` has the `display:block;` css property by default. `display:block` makes the element start on a new line and take 100% of its container width.

If you do the same with `span`, they will stack one after the other. That's because a `span` has the `display:inline;` css property by default, which tells the element to start on the same line as the previous element and has its width and heigh decided by content.

So just by knowing that, you already know how to stack things vertically and horizontaly. Great right?

### Wait wait wait... There's CSS in my html?

Yes! And for a good reason! Imagine your CSS file disapears and your are left only with your html page. Without some pre-made styling, everything would have the same font size, would be inline... That would be unreadable!

That's the reason why browsers implement their own style when encountering an html element. That's a great feature but unfortunately, some people really hate it. Since you want to style the html elements with your own design, you sometimes have to undo some of the basic styling of the browser.

And yes, some of them are verbose to undo, like buttons. That's the reason some people use what is called "resets" css files, to undo the default styling and ease the CSS work. 

But please be careful with resets css files. When you undo the browser styling, you also undo accessibility styles. If you ever used the tab key to navigate inside a website, you saw that the focused element is distinguished from the rest with borders or outlines. Resets can break those things and left you with... nothing. You can't know where you are.

Speaking of where you are, `div` and `span` can sometimes get your users in trouble, unlike the amazing _semantic html_ elements.

### What is semantic html?

When you use `int` or `string` in a programming language, you know exactly what each of them is doing and it helps in code readability right? Well html is the same, it has things with names that help knowing what they do. The problem  is, html is cool with you doing mistakes and won't throw an error if you don't use the right tool for the job. So in the end you can do mistakes and still have a visually working website who is awfull under the hood.

But blind users use a lot of shortcuts with their screen readers to simply jump to different parts of the page, and those shortcuts only work if html is semanticly valid! So having good html and following a solid structure helps them, but also other users. For example, to use the reader mode in several browsers, your html has to be semanticly valid, or the reader mode won't be available.

There are a lot of semantic html elements and even I who loves html doesn't know them all, so I will only cover the most useful. 

### Content sectionning

These semantic elements have the same style properties as a `div` (they stack on top of each others) and won't change anything related to your design, so feel free to use them without stressing.

You at least need those:

? `header` : Put the content from the top portion of your website that your user will read the first time they visit but will skip afterwards, inside this.
? `nav` : Put your navigation elements inside this. You can several `nav` but you then need to use the `aria-label` attribute to name them for blind users.
? `main`: Put the main parts of your website inside this one. Quite useful as blund users can use a shortcut to access it directly.
? `article` : Put the main content of your website inside this one. It must be content that is self-sustainable. Imagine yourself removing everything except this one.
? `aside` : put the content indirectly related to the article content inside this one. It can be a sidebar or a side node for example.
? `footer` : Put the content from the bottom portion of your website that your user will read the first time they visit but will skip afterwards, inside this.

A basic page might look like this for example:

```
<body>
    <header></header>
    <nav></nav>
    <main>
        <article></article>
        <aside></aside>
    </main>
    <footer></footer>
</body>
```

I did not mention the `section` element but it can be quite usefull if you need to split your content in different sections that are directly related to your content and that are of equal importance. For example a blog post should have its main content and comments inside `article`, but comments should be inside a `section` to make it clearer for blind users that the blog post has ended.

```
<main>
    <article>
        Blablabla
        <section aria-label="Comments"></section>
    </article>
</main>
```

You can find the other content semantic element on this {https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Content_sectioning, "page"}.

#### Stop right there, what is this `aria` thing in the previous example?

You'll often see `aria-something` inside the html code presented in this page. As stated by the MDN docs on this {https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA, "page"}, _Accessible Rich Internet Applications (ARIA) is a set of attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities._

Aria is a massive spec to learn and apply so I will just give you some basic ones in this page. Try to follow them as much as you can to give a better readability to your website layouts.

### Yeah, layouts! I want to align those semantic things!

There are parts that you can do just in html, and others that need CSS. *You can save hundread of lines of html by using 5 lines of CSS when you are doing layout*. So don't try doing all your layout only in html. You'll just have a hard time doing what you want and your markup will be ugly.

Layout examples will be given through this page, try to reuse and tweak them to your needs. But first we need to adress something...

#### Don't use tables for layout

I'm gonna say it again. *Never use tables for layout*. I'm dead serious. Never do it.

If you come from the pre-html 5 era, you probably used to organize the elements of your page with tables because it was the norm. But using tables for something else that presenting data is a catastrophic thing for accessibility. When a screen reader meets a table, it says to the user he's entering a table, so the user thinks he's going to hear about data organized in row and columns.

Also using tables makes your html super verbose, hard to read and hard to debug. If you like working in rows and columns, there are modern solutions for you.

### The `display` property in CSS

Here's a primer to help you get started width `display: ???`. As always there's a ton of values that can be used, but we'll just stay focused on the most common/usefull ones.

#### The good old ones

First the good old ones that you apply directly on each element.

? `inline` : elements are stacked one after the other on the same line until there's no place so a new line is created.
? `block` : elements are stacks on top of each other.
? `inline-block` : the best of both worlds as it acts like an inline element, taking it's width and height and staying on the same line, but its height and width can be changed!

#### Flexbox, the GOAT

Flexbox is like a wet dream came true. Imagine: you take the inline-block property where things stack right after each other, but you can decide the direction of this stacking both on the `x` and `y` axis ; and also how the elements behave between themselves!

The main difference comes from the declaration. Instead of declaring `display:flex;` on each element, you only declare it on the parent and it acts on the children.

```
<div style="display:flex;">
    <div>1</div>
    <div>2</div>
</div>
```

##### The flex directions

So how does that work? First, you decide if the flow goes horizontaly or vertically, and in which direction. For this, you can use the great `flex-flow` shortcut property. Its most common options are:

? `row` : the children will be displayed from left to right
? `row-reverse` : the children will be displayed from right to left
? `column` : the children will be displayed from top to bottom
? `column-reverse` : the children will be displayed from bottom to top

You can also decide if the child elements should wrap aka create a new line when they lack to be on a single line, by adding `wrap` or `nowrap`.

Real code examples:

`row wrap`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`row-reverse wrap`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


`column wrap`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`column-reverse wrap`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


##### Align the children

Alignement is cool but what if you could decided the distance between those aligned children or even better, let the browser handle it for you? 

Let's reuse this example of a row going from left to right:

```
<div style="display:flex; flex-flow:row wrap;">
    <div>1</div>
    <div>2</div>
</div>
```

Use `justify-content` to fine tune the way child elements behave between each others on the horizontal axis:

? `flex-start` : the default value, stack everything at the start of te flow.
? `flex-end` : stack everything at the end of the flow.
? `center` : stack all elements at the center of the parent with equal white space on the left and right of the first and last element.
? `space-between` : space elements as far as possible from each others.
? `space-around` : automatically gives each child element the same left and right margins.
? `space-evenly` : instead of giving each child element a margin, creates equal white space between all elements.

Real code examples:

`justify-content: flex-start;`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-start;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`flex-end`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-end;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`center`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`space-between`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-between;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`space-around`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-around;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`space-evenly`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-evenly;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


Now the cool thing is... The `align-items` which is also a component of the flex spec takes the same values as `justify-content`, but for the vertical axis! Which means we have a way to align center both vertically and horizontally in two lines of CSS! 

`justify-content: center; align-items: center;`
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center; align-items: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

Praise flexbox! (/≧▽≦)/

#### Titles

This one is simple, use `h1`, `h2`, `h3`, etc... Your page should at least have an `h1`. Your page sould not jump from `h1` to `h3` without an `h2`. If you want a smaller title, use css but don't ruin the semantic for styling purposes.

The reason why it is important is because blind users have shortcuts that allows them to jump directly to your titles. One of the best things you can do with your titles too is adding an id and a hidden link to them. This way the user can click the title to add the id to the url, allowing sharing links to different parts of the same page.

This website actually uses this system. You can find the JavaScript function for this {https://github.com/Thomasorus/Kaku/blob/master/src/module.js#L179, "in the github repo of my parser"} {/kaku.html, "Kaku", Go to Kaku page}.

#### Links

Links are pretty straightforward, you put an `a` with an `href` attribute and you're good right? Yes, but often links lack readability due to poor phrasing. Try not using texts like "more" or "click here" inside links as they do not convey what's going to happen when you click. Try to have a different texts for each link. 

If you can't use a more contextualized text, then add the `title` attribute in the link with more context inside, and it will provide a tooltip when the user hover on the link. You will also have to add an `aria-label` attribute with the same contextualized text for screen readers. 

Inside those attributes, don't use the work "link". It's not explicit, it doesn't convey meaning. Also because screen readers already say "link", your blind visitors will hear "Link, Link".

Last but not least: if you use `taget="blank"` to open to a new tab, you have to vocalize it using the same `aria-label` attribute. Just add `(open in a new tab)` at the end of your text so blind users know that the previous page is still open.

So the end result might look like this:

```
<a href="/home.html" title="Go to the home page" aria-label="Go to the home page (open in a new tab)" target="blank">here</a>
```

Kwowing all this, it's often less work and trouble to just rephrase the link!

#### Text


====

NAME: 2019
HOST: tracking
BREF: All things I read, watched in 2019
BODY:

# 2019 Overview

## Readings of 2019

All the things I read in 2019.

`...` Means the series is still ongoing but that I started it in 2019

### Novels

- The Remembrance of Earth's Past trilogy - Liu Cixin
- The unfathomable depth of loneliness - Hao Jinfang
- The Book of the New Sun Vol.1 - Gene Wolf 
- Viking Mythology - Neil Gamain

### Mangas

- Beastars...
- Vinland Saga...
- Kingdom...
- Yagate Kimi ni Naru (Bloom into You)
- Shamo
- Sun Ken Rock
- Kusuriya no Hitorigoto...
- Goblin Slayer...
- Blame! (reprint)
- Aposimz...
- No gun's life...
- At the Mountains of Madness (Lovecraft by Gou Tanabe)
- In the abyss of time (Lovecraft by Gou Tanabe)
- Shishunki Renaissance! David-kun
- Gunnm (reprint)
- Gunnm Last Order
- Gunnm: Mars Chronicles...
- Blue Giant
- Saltiness

### Comics

- Shangri La
- Mecanique Céleste

### Art books

- Gustave Doré (Catalogue d'exposition Gustave Doré - Musée d'Orsay)
- Katsuya Terrada Real Size

### Magazines

- L'étiquette 1 & 2
- Atom Magazine

### Notable articles

- {https://www.newyorker.com/magazine/2019/12/16/how-william-gibson-keeps-his-science-fiction-real, "How William Gibson Keeps His Science Fiction Real"}
- {http://paulgraham.com/genius.html, "The Bus Ticket Theory of Genius"}
- {http://www.slate.fr/story/184164/boulangeries-guerre-culturelle-pain-adieu-baguette-disparition-petit-commerce, "La France du pain est coupée en deux"}
- {https://www.nytimes.com/interactive/2019/11/16/world/asia/china-xinjiang-documents.html, "Absolutely No Mercy: Leaked Files Expose How China Organized Mass Detentions of Muslims"}
- {https://www.forbes.com/sites/johnkoetsier/2019/09/02/hong-kong-protestors-using-mesh-messaging-app-china-cant-block-usage-up-3685/, "Hong Kong Protestors Using Mesh Messaging App China Can't Block"}
- {https://matthiasott.com/articles/into-the-personal-website-verse, "Into the Personal-Website-Verse"}
- {https://www.gamekult.com/actualite/une-petite-histoire-du-jeu-de-baston-en-dix-morceaux-3050819125.html, "Une petite histoire du jeu de baston en dix morceaux"}
- {https://www.newyorker.com/magazine/2019/04/08/the-day-the-dinosaurs-died, "The Day the Dinosaurs Died"}
- {https://kotaku.com/how-biowares-anthem-went-wrong-1833731964, "How BioWare's Anthem Went Wrong"}

## Writings of 2019

All the things I wrote in 2019.

### Wrote

- {https://www.redbull.com/fr-fr/evo-2019-tournois-esport-infos, "L’EVO 2019, le plus gros tournoi esport du monde"}
- {https://www.redbull.com/fr-fr/lethal-league-blaze-esport, "Lethal League Blaze, l’autre jeu de combat qui ne dit pas son nom"}
- {https://www.redbull.com/fr-fr/samurai-shodown-esport-jeu-combat, "Samurai Shodown, l’original outsider de l’esport baston"}
- {https://twitter.com/Thomasorus/status/1144623832587821056, "Embrasser, étendre, étouffer le podcast"}
- {https://basgrospoing.fr/fr/articles/la-schizophrenie-street-fighter-iii-third-strike, "La schizophrénie Street Fighter III: Third Strike"}
- {https://www.redbull.com/fr-fr/mortal-kombat-pro-kompetition, "Premières fatalities sur Mortal Kombat XI"}
- {https://www.redbull.com/fr-fr/rza-mortal-kombat?linkId=65552039, "RZA : une main de velours dans un gant de ninja"}

### interviewed

- {https://twitter.com/Vincent_Jule/status/1144341580771409921, "Samurai Shodown: Le retour d'une franchise culte... et un nouvel âge d'or du jeu de combat?"}

### Published

- {https://basgrospoing.fr/fr/articles/theorie-ruissellement-jeu-de-combat-esport, "Trickle-Down Economics in the FGC and E-Sports"}

### Played

- Flappy Fighter
- Untitled Goose Game
- Mortal Kombat XI
- Samurai Shodown 2019
- Apex Legends
- Furi
- Thumper
- Céleste
- Hollow Knight
- The Red Strings Club
- Tekken 7
- Disco Elysium
- A Plague Tale: Innocence

### Coded

- {https://podcastouvert.fr/, "Podcast Ouvert"}
- {https://claviers-mecaniques.fr/, "Claviers mécaniques") - Frontend
- {https://happy-tereshkova-b21ae0.netlify.com/, "Art Eater"}
- {https://github.com/Thomasorus/Podcast-player, "A podcast player"}
- {https://github.com/Thomasorus/UI-concept-tests,"Some concepts for UIs"}
- {https://github.com/Thomasorus/wiki-engine, "My wiki engine"}
- A ton of interfaces at work with accessibility
- Web components with accessibility

## Watched in 2019

All the things I watched in 2019.

... Means the series is still ongoing but that I started it in 2019

### Anime

- Carole & Tuesday
- Sailor Moon S1 (original show)

### Movies

- Promare

### Documentaries

- 10 years with Hayao Miyazaki

### Series

- Mindhunter

### Tv shows

- Terrace House

### Notable videos

- How Mind Control Saved Oddworld: Abe's Oddysee
- The Real Fake Cameras Of Toy Story 4


====

NAME: EMPTY AND FULL
HOST: Stories
BREF: A story about flowers and brambles
BODY:

# Empty and Full

The story of *Empty and Full* narrates how {./the-first-one.html, "The First One"}, an immortal being tries to restore balance in an universe he subverted. The whole saga is divided into three major stories: Eat The World, Boxes Filling Space and a third unknown story.

Globally, *Empty and Full* is used a playground to experiment storytelling and painting, but also to question personal philosophical interrogations.

====

NAME: THE FIRST ONE
HOST: empty and full
BREF: The first one is the main character of Empty and Full
BODY:

# The First One

The *First One* is the main protagonist of {./empty-and-full.html, "Empty and Full"}.

## Eat The World

He was born onto one of the {./flower-houses.html, "Flower Houses"} and as the only descendant of his family, the direct heir to inherit a Flower House. His mother died giving him birth, making his father resent him. He grew in solitude and was given a strict education that left him without space to breathe.

At the {./age-of-trial.html, "Age of Trial"}, he was sent to war, like all others of his kind. As the only heir of his family, he should been given a secure position during his two cycle service. Unfortunately, his father opponents maneuvered to place him in the battlefield, hoping for its death and the possibility to inherit his family's Flower House.

During his two cycles service, The First One managed to survive all the battles he was sent to. He made a lot of companions among the Brambles Folks, broadened his horizons and developed a profound anti-war and anarchist attitude. Unfortunately, he was injured during his last battle at the end of his two cycles service. He lost his two arms and was heavily disfigured. Not capable of fighting, he was sent home where he discovered died not long ago.

Not willing to have children and incapable of handling most political and administrative tasks he inherited with the Flower House, he called his ancient war companions for help. As law forbids to inherit a Flower House when its owner is still alive, The First One organized its own as an anarchist organization and drafted a testament where he gave away everything he had to its group.

After a few years later, once all the talks about his political choices disminished, he announced to his closest companions his will to free all the slaves living on his Flower House. By doing so, he hoped it would encourage a more global slave revolution on the other Flower Houses. He also said his Flower House should be open to anyone and that it's wealth should be shared with the Brambles Folk.


====

NAME: AGE OF Trial
HOST: Empty and full
BREF: The explanation about the age of trial
BODY:

# Age of Trial

The Age of Trial is the age kids are sent to participate into the War on Brambles. They have to serve for two cycles before going home. Depending on their social standing they are given different roles. The most fortunate are given strategist and secure positions to ensure their families won't lose them. The common people are trained to battle and a lot of them never goes back home.


====

NAME: IT EATS THE World
HOST: Empty and full
BREF: The first part of the empty and full series
BODY:

# Eat The World

It Eats the World is the first arc of {./empty-and-full.html, "Empty and Full"}. It tells the story of several beings led by The First One, a creature betrayed by its kind seeking revenge. As he refused to be taken to eternal rest by its own God so he could take revenge, he concluded a pact with The Brambles and became an enslaved immortal.

As both the vessel and slave of The Brambles, he then proceeded to recruit other outcasts and shared his powers with them. Together they started a general war with the goal of destroying void itself by filling it with The Brambles.


====

NAME: FLOWER HOUSES
HOST: Empty and full
BREF: FLower houses are giant flower capable of containing entire populations
BODY:

# Flower Houses

Flower Houses are gigantic habitable flowers. They mostly belong to wealthy families, who use the light and warmth to grow food and medicinal plants. As it's almost impossible to grow anything into the Brambles, Flower Houses provide a massive amount of the global food consumed.

Products from the flowers themselves or their leaves are also used to create luxurious goods, rare medicine and elaborate clothing. Most Flower Houses rely on enslaved Bramble Folks for their workforce, promising them a better life, sunlight, absence of war.

====

NAME: FLOWER HARVESTERS
HOST: Empty and full
BREF: FLower harvesters are a cast specialized in finding flower houses
BODY:

# FLower harvesters

FLower harvesters are a cast of specialized biologists trained to art of survival in the brambles. Most of the time, they are hired for many years by privilegied individuals looking for new flower houses. When they find a potential flower house, they note its location by going at the top of the brambles and looking at the starts. Then they rate the flower chance of survival and if it can't survive or grow big enough to form a new house, they harvest it or leave it alone.

The hunters are easily identified by their full black clothing, their strange mask or their darkened skin color. Hunters are also a rarety. They require several years of education before being able to explore the brambles and a lot of them die in their first years. Despite what most people think, they are not a cult and don't worship any specific god. They also don't obey any flower governement, as there's no governing entity in the brambles.

FLower harvesters all share the basic same equipment:

- Shears, saws and blades to cut brambles and going forward
- Full black clothes to avoid being detected
- Localisation and mapping tools compass, paper maps and sextans
- Hunting tools : bow and arrows, traps
- A portable greenhouse where they repot small flower they harvested (to be resold later)

The rate of flower discovery has been increasing as hunters became more efficient in their survival craft. But not the rate of habitable flowers remain low. The last discovered flower house was 317 units ago.

====

NAME: THE BRAMBLES
HOST: Empty and full
BREF: The brambles are a mythological plant asserving the world of Empty and Full
BODY:

# The Brambles

The brambles are a mythological plant asserving the world of Empty and Full