====
NAME: Home
HOST: Home
BREF: The personal wiki of Thomasorus
BODY:

# Thomasorus' Wiki

- {about.html, "About me"}

## Tools

- {tools.html, "Philosophy"}
- {kaku.html, "Kaku 書く", Kaku is a markup language}
- {ronbun.html, "Ronbun 論文", Robun is a static site generator}
- {keyboards.html, "Keyboards", The keyboards I use}

## Tracking

- {tracking.html, "About tracking myself"}
- {time.html, "Time tracker"}
- {2019.html, "The year 2019"}

## Knowledge

- {html-tips.html, "HTML Tips and tricks, everything I know about it"}

====

NAME: Keyboards
HOST: Tools
BREF: I use custom keyboards to write and work
BODY:

# Keyboards

I use two keyboards: the *Happy Hacking Keyboard* (HHKB) by PFU and a *Happy Hacking Keyboard plate replica* made in China.

## Happy Hacking Keyboard

[media/hhkb.jpg, The happy hacking keyboard]

Bought in 2016 at Akihabara in Japan, this HHKB had been my daily driver since. It took several weeks to get used to it as I learned both to write in QWERTY and the very special layout of this keyboard. It's currently customised with a {https://kbdfans.com/products/pre-orderelectrostatic-capacity-keyboard-japanese-keycaps?_pos=16&_sid=098521c43&_ss=r, "japanese keyset"}. As for all HHKBs, the switches are Topre.

## HHKB plate replica

[media/hhkb-plate.jpg, My plate replica of HHKB]

Bought in 2018 to have a second keyboard with the HHKB layout to drop at work. This keyboard initially had a rough CNC cut plate with Outemu Purple switches. I unsoldered the switchs and replaced them with Cherry MX Silent Red. A friend also lubbed them to avoid making noise. A vinyl like sticker was then applied to the plate to hide the rough metal. 

====

NAME: Kaku
HOST: Tools
BREF: Kaku is a markup language made to fit my needs.
BODY:

# Kaku 書く

Kaku (write) is my own markup language. It's inspired by Markdown with a few modification for quotes, links, images and lists handling. It was created to fit my needs and is currently used on this website.

This {https://github.com/Thomasorus/Kaku, "repositoty"} contains the detailed specs and a JavaScript parser for Kaku.

====

NAME: Tracking
HOST: Home
BREF: An explanation about why I track some stuff in my life
BODY:

# Tracking

I track time spent on my hobbies. First I hated the idea. I saw it as self-surveillance, as an intrusion of accounting and management in my personal space where precisely, you don't count your time.

After two months I realized I had the wrong feeling. Tracking hours has become a tool for self-discovery. It allows me to take a huge step back and to be more careful about my well-being. It also helps making connections between what I do and what I feel every day.

For example in the first two months of January, I spent a lot of time on Bas Gros Poing. I was doing web development but also editorial and podcast stuff. It was a lot of fun and by contrast, I think it deepened my disinterest for my daily job. It also explained the low motivation I felt.

For the first two months of 2020 I spent around 70 hours on personal projects. It's 7.8 hours a week, which means I overall worked a day more each week on personal stuff. It made me realize I was on the wrong path to accomplish one of my goals, which is to be less productive and more creative.

For people like me who wonders where their free time disappears, tracking time helps. My advice however, is to find a personal way of tracking time instead of using apps, bullet journals or stuff related to productivity. Finding your own way of tracking your own time is also part of the self-discovery thing.

To me tracking time doesn't mean trying to be more productive, but the opposite.

## Tracking...

- {time.html, "My time on a week basis"}
- {2019.html, "The year 2019"}

====

NAME: Tools
HOST: Home
BREF: A collection of hardware and software tools I use or made
BODY:

# Tools

A collection of tools I use or made. 

## Why I make my own tools

As software developers we are all the time required to follow the next big thing and use new frameworks or libraries. It comes with a loat of code bloat, it requires to relearn everything from scratch and does not favors building strong fundamentals. It's exhausting and maintains people into imposter syndrome.

Creating my own instead of using other people's tools is a very appreciable exercise of self-discovery. It allows to ask, ala Marie Kondo, if these tools I use all the time as a software developer brings me happiness. And if not, why do I keep using them?

Coding my tools removes the notion of efficiency and productivity associated with software development. I don't know when the tool I build will be done and it doesn't matter, that's why it's relaxing. Instead of complying with other people way of doing, I discover my own and my software evolves with me.

It's a reappropriation of the means of production towards self-discovery.

## Software

- {kaku.html, "Kaku 書く", Kaku is a markup language} is my markup language
- {ronbun.html, "Ronbun 論文", Robun is a static site generator} is my static site generator

## Hardware

- {keyboards.html, "Keyboards", The keyboards I use} I use and customize

====

NAME: Ronbun
HOST: Tools
BREF: Ronbun is my static site generator and time tracking system
BODY: 

# Ronbun 論文

Ronbun (_paper_) is my *static site generator*. It's built with nodejs and uses {/kaku.html, "Kaku"} as a markup language and imagemagick on the server to process images. It also process time tracking and presents it {time.html, "as graphics"}.

Ronbun uses a {https://github.com/Thomasorus/Ronbun/blob/master/data/content.kaku, "single file"} as a source of content and a {https://github.com/Thomasorus/Ronbun/blob/master/data/time.kaku, "text file"} for time recordings. It parses files and generates HTML using a template. Ronbun and the {kaku.html, "Kaku"} parser try as much as possible to provide light and accessible pages by using {html-tips.html, "standard HTML techniques"}.

Ronbun was created as a self discovery project following my {tools.html, "philosophy"} about personal projects.

Ronbun's repo is on {https://github.com/Thomasorus/Ronbun, "github"}.

Next features:

+ Avoid rebuilding unchanged pages
+ Avoid reprocessing unchanged images
+ Add time and date of generation on pages
+ Provide better navigation
+ Add RSS support
+ Add sitemap

Global goals:

+ Provide more stats on the tracker
+ Full rewrite in a more generally available language (C, Python...)



====

NAME: About
HOST: Home
BREF: About me
BODY:

# About me

I'm a front-end developer specialized in interfaces, user experience and accessibility. I'm a technical generalist with experience on web projects of all sizes and all types of stacks. I have worked alone, as well as in teams of dozens of people, sometimes as a technical advisor for non-technical coworkers.

I have a strong interest in indie web, low tech and sustainable stacks. I've been producing podcasts and writing about fighting games, my main hobby, for more than ten years and have worked for professional publications and brands; as well as organized tournaments and events in non-profit organizations. I also was a French comics specialized bookseller.

I have a degree in fine arts and web development.


====

NAME: curriculum vitae
HOST: Home
BREF: My curriculum vitae
BODY:

# Curriculum Vitae

====

NAME: Knowledge
HOST: Home
Bref: Where I put things I don't want to forget
BODY:

# Knowledge

This page references knowledge of all sorts I want to keep written. It can be technical writing, ideas, notes to self. 

- {html-tips.html, "HTML tips and tricks"}

====

NAME: Html tips
HOST: knowledge
Bref: A collection of HTML and CSS tips to build simple yet optimized websites
BODY:

# HTML and CSS simple tips and tricks for your website

The goal of this page is to help you with easy tricks to make the HTML of your website accessible, readable by everyone and optimized for low bandwidth.

This tips and tricks are from on personal experience working as a front-end web developer specialized in UI and accessibility for the last 5 years. It might not be perfect or 100% accurate. If you find any problem, please {/now.html, "contact me", Go to my contact page}.

## About accessibility

Accessibility is making your website inclusive for people with disabilities. If respecting accessibility can seem like a chore, it's actually a good way of learning good HTML practices and everything in these pages is therefore influences by it.

- {what-is-accessibility.html, "So, what is accessibility?"}
- {accessibility-rules-and-tools.html, "Basic rules about accessibility and tools to enforce them"}

## The basics of HTML

This section will give your some basic knowledge and code to get started. It will also explain the basics of semantic HTML and why it's important. As everything in these pages, it's a toolbox of things I use, not a full specification rewriting, and it's heavily influenced by my own practices.

- {the-basics-of-html.html, "The basics: the head, the div and the span"}
- {what-is-semantic-html.html, "What is semantic HTML and why should I care?"}


## Layouts in HTML

Once you have the basics sets it's probably time to do some layouts. There are parts that you can do just in HTML, and others that need CSS. Layouts are the ones who need CSS. *You can save dozens of lines of HTML by using 3 lines of CSS when you are doing layout*. So don't try doing all your layout only in HTML. You'll just have a hard time doing what you want and your markup will be ugly.

Layout examples will be given through these pages, try to inspect them with your browser, reuse and tweak them to your needs.

- {never-use-tables-for-layout.html, "Don't you dare use tables for layout!"}
- {the-display-property.html, "The basics of layout with the display property"}
- {flexbox-the-goat.html, "Flexbox, the goat"}
- {css-grid-the-almighty.html, "CSS Grid the almighty"}

## Common elements inside your layouts

So we have our page layouts structured by semantic HTML elements. Now is the time to put some content. Text! Images! Videos! Titles! We want them all!

- {order-your-titles-correctly.html, "Order your titles correctly"}
- {organize-your-text-content.html, "Organize your text content"}
- {all-about-images.html, "All about images"}
- {all-about-video-and-audio.html, "All about video and audio"}
- {doing-forms-correctly.html, "Doing forms correctly"}
- {tables-are-not-that-complicated.html, "Tables are not that complicated"}

## The inline semantic elements

What's the difference between the text semantic elements and the inline semantic elements? Well the first ones are still used to structure your content, but the second ones are used to indicate more precisely what the text inside is about.

- {make-your-links-clear-and-accessible.html, "Make your links clear and accessible"}
- {when-to-use-a-button-and-a-link.html, "When to use a button and a link"}
- {strong-b-em-and-i.html, "The mess of strong b em and i"}
- {other-kinda-useful-semantic-elements.html, "Other kinda useful semantic elements"}

## The not very used interactive elements

Interactive elements are fully functional tools in HTML. Unfortunately they are difficult to style and most often not used that much for this reason. Still some of them are really cool.

- {html-interactive-elements.html, "Some interactive elements that can be useful"}

## Performance

Performance is a hot topic as the website obesity crisis keeps going. In these pages I already explained a few things to improve performance, especially in the video and image pages. Still there are a few broader topics related to performance that we should talk about.

- {css-good-practices.html, "CSS Good practices to optimize file size and specificity"}
- About JavaScript frenzy and hate

## Page updates

? `24/08/2020` : Added a section about reader modes in the accessibility section.
? `22/08/2020` : In the interactive elements page I wrote that `<details>` and `<summary>` could not be animated. I was wrong.

====

NAME: What is accessibility
HOST: HTML tips
BREF: A primer on accessibility for the web
BODY:

# What is accessibility ?

I will often refer to _accessibility_ in these pages, which globally means having a website that people with disabilities can use. Disabilities come in a lot of ways. The most obvious one is blind people, who have to use a screen reader but there's a lot of handicaps that can give your a hard time on the internet.

You might be deaf, which means you need a transcribed version of an audio or video file. You might have dyslexia, which means you have a hard time reading text and need special fonts (and surprisingly _Comic Sans MS_ is one of them). You might have anxiety and panic disorders, which means you can't go to some websites who are too cluttered or trigger too many animations. You might have a cognitive impairment, which means you have a hard time understanding some websites. There are a lot of others handicaps that might make the web hard to use.

Coding properly for accessibility (basically, respecting standards) doesn't mean your website is accessible by magic. It means other tools can take over by using the code you wrote. Screen readers are the obvious ones, but others like reader mode in your browser of choice is also one of them as it allows to change colors, fonts, etc...

## Is accessibility all about code?

No, not at all.

All accessibility problems cannot be solved only by code. Some are only fixable by enforcing an inclusive interface and user experience design. You might have heard that enforcing accessibility leads to design constraints, which is true. But from experience it's entirely possible to have a nice design and user experience while being accessible. People saying it's not possible are lazy liars. Also you might have heard that enforcing accessibility is bad for SEO. It's also a lie as both can work together, you just have to want it.

Respecting accessibility in UI and UX design often leads to a better designs and user experiences for all users. So when I say that something _is good for accessibility_ it often means it's _good for all your users_, and following these advises will result in a better website of everyone.

## Accessibility is hard

To enforce accessibility you need to get yourself into the shoes of your disabled users. Is this usable by screen readers? Is it understandable by people with cognitive impairments? Questioning everything you do is a good way of doing it, but on the long run it leads to the realization that basically nothing is perfect despite your efforts.

And that's the hard pill to swallow: you probably can't make accessibility perfect by yourself (especially on big projects) without funding, manpower and a lot of testing. It's a huge task and you should aim for _usable_ instead of _perfection_ or you'll never see it end. Try to detect what is important for your user in each page or situation and make sure it works.

Ask yourself, what is the goal of the website you make? For a bank it's numbers, are the numbers accessible? For a journal it's text, are the texts accessible? For a government taxes website, it's being as clear as possible about legal stuff. 

What is the main think you can't mess around with? Make it your top accessibility priority, everywhere, and fix it. Once it's done, then you'll come back to fix those small problems, like typos or unimportant texts not being clear enough. 

Choose the right battle and fight it until the end!

Next: {accessibility-rules-and-tools.html, "Basic rules about accessibility and tools to enforce them"}


====

NAME: Accessibility rules and tools
HOST: HTML tips
Bref: A collection of accessibility tips to build simple yet inclusive websites
BODY:

# Accessibility basic rules and tools

Accessibility is a vast, very hard to navigate maze that even people like me who worked on it almost two years can't properly handle correctly. So I don't expect myself to be able to explain everything, and I don't expect you to think about everything. 

In this page I will simply list the essential rules I had to enforce myself and that will help you get started. Later, you can dig a bit more by yourself to fix your own specific problems.

## How screen readers users use them?

Most people don't know it, but *screen readers users don't only use the tab key to navigate in pages*!

What does that means? That means don't panic when you start tabbing everywhere and see the focus not stopping where you want! When I first started I thought accessibility was all about adding the `tab-index="0"` HTML attribute to almost every element because otherwise, the tab key would not stop on it. But that's not how that works!

Screen readers users will use a combination of arrows to read phrases or letters, shortcuts to access titles and other parts of the website, as well as the tab key, but only to get out of input element in forms or access links and buttons! Like any other users with experience using a tool, they probably use it in a way that is totally foreign to you!

That's why it's important to have your website tested by actually disabled people. Don't assume how disabled people use the web, ask them to guide you if you can. You will probably be surprised at how fast screen readers users can navigate a page.

## The basic rules

Here are some basic but essential rules to help you get started:

- Don't block the ability to zoom or zoom out on your website.
- Don't go below 13 pixels in font size. Yes users can zoom, but that would be way more comfortable if they didn't have to do it in the first place!
- The basic 16px font size that all browsers have is often a good thing to follow.
- Don't use super thin fonts. They are pretty but very hard to read!
- Don't overdo it with animations, flashes and stuff that can trigger stress.
- If your website is not compatible with reader mode, try providing an accessibility menu allowing the change of colors and fonts.
- Take care about color contrasts, you need a ratio of 4.5:1 to be sure most people can read your texts.
- Don't indicate states on your website or application by only using colors (like green and red) as colorblind people can't distinguish them (that's the reason traffic lights don't do it!)
- Try not using icons alone, especially when for ultra specific things that don't make sense on their own. Add text to indicate what it is.
- Don't put crucial information inside images, even if you add an `alt` attribute!
- Ensure keyboard focus is visible and clear. Most of the time, it means not disabling the `focus` styles in CSS.
- Provide a _Skip to Content_ link at the top of your website.
- If you have audio content, provide a transcript.
- If you have video content, provide subtitles.

## How to hide text destined to screen readers users

You can use this CSS class:

```
.visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
```

But don't overdo it, it must be the exception, not the rule. Some screen readers users can actually see but prefer a combination of voice and text. If you start hiding walls of text the user can't see, you're gonna create a very unpleasant experience.

## How to hide things from screen readers

Use the `aria-hidden="true"` attribute on the HTML element of your choice. Again, the exception, not the rule. Use it if something can't be vocalize, but provide a textual explanation of it right after.

## What is a skip content link?

Screen readers users have shortcuts to access to different parts of your website, but that doesn't mean you can't give them your own shortcuts. Escape or skip links are an invisible menu of anchor links to different parts of your page, that you right after the `<body>`.

It's not technically complicated to do and can save your screen readers users tons of time, especially if you have big and complex header or navigation before the main content.

## What tools can I use?

One of the most used combinations of screen readers and browser are {https://www.nvaccess.org/download/, "NVDA"} and {https://firefox.com, "Firefox"}. But you can also use the {https://chrome.google.com/webstore/detail/chromevox-classic-extensi/kgejglhpjiefppelpmljglcjbhoiplfn, "Chromevox"} extension for Chrome to get an in-browser screen reader. Most operating systems also provide voice over and from what I heard, the one on iOS is particulary good.

In Firefox Dev Tools, the "Accessibility" tab will show you a textual representation of your website nodes that can help you detect what will be vocalized and won't. There is a lot of browser extensions for accessibility that will scan the current page and tell you what is violation the rules. 

I've used the {https://www.deque.com/axe/, "Axe extension"} in the past and enjoyed it, but there's a lot more.

## How does the reader mode works?

All modern browsers provide a reader mode that strips most of the design to keep only text and images. They also allow changing fonts, background colors, text to speech and other features.

The problem is... it's not clear how and why some pages allow the reader mode to exist and others don't. According to this {http://zumguy.com/enabling-reading-mode-on-your-website/, "article"} analyzing a {https://github.com/mozilla/readability/, "standalone version"} of Firefox reader mode, an algorythm analyzes the content inside `<p>` elements, checks how _content-y_ they are and assigns them a score. Commas, length of phrases and other parameters are taken into account to score the page and decide if yes or no, it deserves reader mode.

It means that small pages are not going to offer reader mode, which is a shame. But you probably can't do anything about it outside reorganizing content.

Next: {the-basics-of-html.html, "The basics: head, div and span"}

====

NAME: The basics of HTML
HOST: HTML tips
Bref: The basics of what is needed when starting a website in HTML
BODY:

# The basics of HTML

This section will give your some basic knowledge and tips about HTML, mostly what semantic tag to use in what situation. 

## What you need to get started

You need this:

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>
```

You need to indicate that the document is HTML, the language of the document and of course its encoding. You also need a title as it will be visible in the tab and spoken by screen readers when the page is loaded.

The `<meta name="viewport>"` is especially important. It can be used to block the zoom or zoom out of the page. But don't do it, please *never block the user from zooming in or zooming out on a website*. This is the basic accessibility thing, don't deactivate it!

Of course there's a lot more that can go into the `<head>` of a website. Styles, scripts, meta-descriptions, open graph tags... The head has its own life in itself that you can explore, but it's not the purpose of this guide to give you an extended lesson about it so we'll skip it and start adding things inside the `<body>`.

## Divs and spans

HTML is all about putting...things! Inside... other things? So your first reflex is probably to grab a `<div>` or a `<span>`, the good old ones! But what's the difference between them?

If you put several `<div>` one after the other, you'll see they stack one above the other. That's because a `<div>` has the `display:block;` CSS property by default. `display:block` makes the element start on a new line and take 100% of its container width.

If you do the same with `<span>`, they will stack one after the other. That's because a `<span>` has the `display:inline;` CSS property by default, which tells the element to start on the same line as the previous element and that its width and heigh are decided by content.

So just by knowing that, you already know how to stack things vertically and horizontally. Great right?

## Wait wait wait... There's CSS in my HTML?

Yes! And for a good reason! Imagine your CSS file disappears and your are left only with your HTML page. Without some pre-made styling, everything would have the same font size, would be inline... That would be unreadable!

That's the reason why browsers implement their own styling when encountering an HTML element. It's a great feature but unfortunately, some people really hate it. When you want to style the HTML elements with your own design, you sometimes have to undo some of the basic styling of the browser.

And yes, some of them are verbose to undo, like buttons. That's the reason some people use what is called "resets" CSS files, to undo the default styling and ease the CSS work. 

But please be careful when resetting styles. When you undo the browser styling, you also undo accessibility styles. If you ever used the tab key to navigate inside a website, you saw that the focused element is distinguished from the rest with borders or outlines. Going too hard on un-style can break those things and left you with... nothing. You are lost.

Speaking of being lost, `<div>` and `<span>` can sometimes get your users in trouble, unlike the amazing _semantic HTML_ elements.

Next: {what-is-semantic-html.html, "What is semantic HTML?"}

====

NAME: What is semantic HTML
HOST: HTML tips
Bref: An explanation of semantic HTML and why it's important
BODY:


# What is semantic HTML?

When you use `int` or `string` in a programming language, you know exactly what each of them is doing and it helps in code readability right? Well HTML is the same, it has things with names that help knowing what they do. The problem  is, unlike a typed language, HTML is cool with you doing mistakes and won't throw an error if you don't use the right tool for the job. So in the end you can do mistakes and still have a visually working website who is awful under the hood.

But visually impaired users use a lot of shortcuts with their screen readers to simply jump to different parts of the page, and those shortcuts only work if HTML is semantically valid! So having good HTML and following a solid structure helps them, but also other users. For example, to use the reader mode in several browsers, your HTML has to be semantically valid, or the reader mode won't be available.

There is a lot, _a LOT_ of semantic HTML elements and even I who loves HTML doesn't know them all, so I will only cover the most useful. 

## Content sectioning

These semantic elements have the same style properties as a `<div>` (they stack on top of each others) and won't change anything related to your design, so feel free to use them without stressing. You can even add them to an existing design without trouble!

You at least need those:

? `<header>` : Put the content from the top portion of your website that your user will read the first time they visit but will skip afterwards, inside this.
? `<nav>` : Put your navigation elements inside this. You can have several `<nav>` but you then need to use the `aria-label` attribute to name them for screen readers users.
? `<main>`: Put the main parts of your website inside this one. Very useful as it indicates to screen readers users they reached the main part of the page.
? `<article>` : Put the main content of your website inside this one. It must be content that is self-sustainable. Imagine if you had to remove everything but one thing, and put it inside this tag.
? `<aside>` : put the content indirectly related to the article content inside this one. It can be a sidebar or a side note for example.
? `<footer>` : Put the content from the bottom portion of your website that your user will read the first time they visit but will skip afterwards, inside this.

A basic page might look like this for example:

```
<body>
    <header></header>
    <nav></nav>
    <main>
        <article></article>
        <aside></aside>
    </main>
    <footer></footer>
</body>
```

I did not mention the `section` element but it can be quite useful if you need to split your content in different sections that are directly related to your content and that are of equal importance. For example a blog post should have its main content and comments inside `<article>`, but comments should be inside a `section` to make it clearer for screen readers users that the blog post has ended.

```
<main>
    <article>
        Blablabla
        <section aria-label="Comments"></section>
    </article>
</main>
```

You can find the other content semantic element on this {https://developer.mozilla.org/en-US/docs/Web/HTML/Element, "page"}.


## Stop right there, what is this `aria` thing in the previous example?

You'll often see `aria` attributes inside the HTML code presented in this page. As stated by the MDN docs on this {https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA, "page"}, _Accessible Rich Internet Applications (ARIA) is a set of attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities._

Aria is a massive spec to learn and apply so I will just give you some basic ones in this page. Try to follow them as much as you can to give a better readability to your website layouts.

Next: {never-use-tables-for-layout.html, "Don't use tables for layout"}

====

NAME: Never use tables for layout
HOST: HTML tips
Bref: An explanation about why using tables for layout is a bad practice
BODY:

# Never use tables for layout

I'm gonna say it again. *Never use tables for layout*. I'm dead serious. Never do it.

If you come from the pre-HTML 5 era, you probably used to organize the elements of your page with tables because it was the norm. But using tables for something else that presenting data is a catastrophic thing for accessibility. When a screen reader meets a table, the screen readers tells him he's entering a table, so the user thinks he's going to hear about data organized in row and columns.

Also using tables makes your HTML super verbose, hard to read and hard to debug. They are way simpler solutions to do what most people try to do with tables.

Next: {the-display-property.html, "The display property"}

====

NAME: The display property
HOST: HTML tips
Bref: What is the display property in CSS and how it affects HTML
BODY:

# The `display` property

Here's a primer to help you get started width `display: ???`, the basic tool for doing layouts in HTML and CSS. As always there's a ton of values that can be used, but we'll just focus on the most common/useful ones.

## The good old ones

First the good old ones that you apply directly on each element.

? `inline` : Elements are stacked one after the other on the same line until there's no space so a new line is created.
? `block` : Elements are stacks on top of each other.
? `inline-block` : The best of both worlds as it acts like an inline element but its height and width can be changed!

Those values are still in use today but are way less common in modern layout than they used to. Before `flexbox` and `grid`, developers used a lot of `inline-block` layouts to make responsive design work and content flow nicely. It was sometimes very complicated and the reason why things like grid frameworks were very popular.

Today there is absolutely no reason to not use `flexbox` and `grid`. They can even be used on Internet Explorer 11 if written correctly and compiled with a tool like {https://github.com/postcss/autoprefixer, "Autoprefixer", Go to Autoprefixer github page}. 

Next: {flexbox-the-goat.html, "Flexbox, the goat"}

====

NAME: Flexbox the goat
HOST: HTML tips
Bref: A primer on flexbox and why it's awesome and simple for HTML layout
BODY:

# Flexbox, the GOAT

A few years ago the massive adoption of flexbox was like a wet dream coming true. Imagine: you take the inline-block property where things stack right after each other, but you can decide the direction of this stacking both on the `x` and `y` axis ; and also how the elements behave between themselves!

The main difference comes from the declaration. Instead of declaring `display:flex;` on each element, you only declare it on the parent and it acts on the children.

```
<div style="display:flex;">
    <div>1</div>
    <div>2</div>
</div>
```

So how does that work? 

## Decide the direction

First, you decide if the flow goes horizontally or vertically, and in which direction. For this, you can use the great `flex-flow: ???;` shortcut property. Its most common options are:

? `row` : the children will be displayed from left to right
? `row-reverse` : the children will be displayed from right to left
? `column` : the children will be displayed from top to bottom
? `column-reverse` : the children will be displayed from bottom to top

You can also decide if the child elements should wrap aka create a new line when they lack to be on a single line, by adding `wrap` or `nowrap`.

Real code examples:

<span class="visually-hidden">Hello screen reader users! Several code examples of layouts are demonstrated in this page. There is no real content inside these examples that would help you understand them. So instead, for each code example, I decided tell you the code example is hidden, but you can inspect it with developer tools if you are a one. Sorry for the lack of a better solution.</span>

`flex-flow: row wrap;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`flex-flow: row-reverse wrap;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


`flex-flow: column wrap;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`column-reverse wrap`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

Neat right?

## Align your children on the X axis!

Alignment is cool but what if you could decided the distance between those aligned children or even better, let the browser handle it for you? 

Let's reuse this example of a row going from left to right:

```
<div style="display:flex; flex-flow:row wrap;">
    <div>1</div>
    <div>2</div>
</div>
```

We're going to use `justify-content: ???;` to fine tune the way child elements behave between each others on the horizontal axis:

? `flex-start` : The default value, stack everything at the start of te flow.
? `flex-end` : Stack everything at the end of the flow.
? `center` : Stack all elements at the center with equal white space on the left and right.
? `space-between` : Space elements as far as possible from each others.
? `space-around` : Automatically gives each child element the same left and right margins.
? `space-evenly` : Creates equal white space between all elements.

Real code examples:

`justify-content: flex-start;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-start;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: flex-end;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-end;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: center;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-between;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-between;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-around;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-around;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-evenly;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-evenly;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


## Align your children on the Y axis!

Now the cool thing is... The `align-items: ???;` CSS property takes the same values as `justify-content`, but for the vertical axis! Which means we have a way to align on the `x` and `y` axis in two lines of code!

It allows us to create the holy grail of alignment: center both vertically and horizontally in two lines of CSS! 

`justify-content: center; align-items: center;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center; align-items: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

Praise flexbox! <span aria-label="Happy smiley praising with hands up!">(/≧▽≦)/</span>

There's a lot more you can do with Flexbox. You can align items individually, reorder items, decide if they are allowed to shrink or grow in size. If you want to learn more about Flex, try the in-game browser {https://flexboxfroggy.com, "Flexbox Froggy"}. If you are not into games try this free course on {https://www.youtube.com/watch?v=Vj7NZ6FiQvo&list=PLu8EoSxDXHP7xj_y6NIAhy0wuCd4uVdid&index=1, "youtube"}.

You might be thinking _Yeah this is cool, but not as cool as my good old tables_. Well rejoice dear reader as I'm going to make you happy.

Next: {css-grid-the-almighty.html, "CSS Grid the almighty"}

====

NAME: CSS Grid the almighty
HOST: HTML tips
Bref: A primer on grod and how it can replace CSS grid frameworks
BODY:


# CSS Grid the almighty

CSS Grid is a relatively new spec that saw massive adoption from browser around the start of 2018 and is now used almost everywhere. So what it is about?

Basically, it's about making virtual grids with columns and rows. You might have met 12 column grids in CSS frameworks like Bootstrap before? That's what Grid allows you to replicate in a few lines of code, except it's way more powerful and easy to use.

Even more than Flexbox, it's a _massive_ spec with tons of use cases and syntax tricks. It's extremely powerful but it's also easy to get lost in it, so we'll just try a few layouts and use cases to get you started with columns and rows.

## So you like columns?

For this example we'll go with just 6 vertical columns. How would that work?

First we have to use `display: grid;` on the parent element, just like we did with flexbox. They we can declare our grid with the `grid-template-columns: ???;` property.

<span class="visually-hidden">Hello screen reader users! Several code examples of layouts are demonstrated in this page. There is no real content inside these examples that would help you understand them. So instead, for each code example, I decided tell you the code example is hidden, but you can inspect it with developer tools if you are a one. Sorry for the lack of a better solution.</span>

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

So let's break it down, what's going on here? The `repeat()` shortcut is a function we use to declare the number of columns we wanted instead of writing `1fr 1fr 1fr 1fr 1fr 1fr`. 

The `fr` is a CSS unit, like pixels or percentages, that means `fractional unit`. In this example, `1fr` repeated six times means _split the space in six and give each children the same space_.

So what happens if we decide that the first column should take 2 times the space of other columns? The grid readjust itself nicely:

`grid-template-columns: 2fr repeat(5, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: 2fr repeat(5, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

But wait, what happens if there is not enough children? The grid keeps it's 6 column layouts and populate the 5 elements inside the 5 first columns:

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
</div>


If too many children, the grid will create a new row:

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
      <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">7</div>
    </div>
</div>

In Grid tutorials you will often hear about the "explicit" and "implicit" columns and rows. The explicit is the one you declared with your code. The implicit is the one created by the browser when there's no written rules to handle specific use cases or bugs. You can declare rules for both implicit and explicit grids even if I'm not going going into details on this.

Of course we could have a grid where columns have a fixed size in pixels. Doing so would ensure the columns keep a reasonable size even on mobile, but it would make the whole thing un-responsive!

`grid-template-columns: repeat(6, 140px);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="overflow:scroll-x;display:grid; grid-template-columns: repeat(6, 140px)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

At this point, you're probably thinking that a media query is needed to make the grid go from `fr` units to `px` units when the viewport is smaller. What a chore right ?...

Well dear reader I have something incredible for you...

<div style="display:flex; align-items:center; justify-content:space-evenly; margin:50px; text-align:center;"><span aria-label="Smiley throwing sparkles" style="white-space:nowrap;">(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧</span><strong>THE INCREDIBLE <br> MEGA AWESOME <br> NO MEDIA QUERIES <br> RESPONSIVE GRID</strong><span aria-label="Smiley being super chill" style="white-space:nowrap;">〜(￣▽￣〜)</span></div>

`grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(70px, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

Try resizing it! Great right?! So what's happening here? 

- First, we removed the fixed number of columns in the `repeat` to let the child elements decide how much columns the grid should have. Frightening? Don't worry.
- Then, we added the `auto-fit` property to let child elements grow in size (it can be replaced with `auto-fill` if you don't want your columns to grow).
- Finally, we added the `minmax` function that let us define what the minimum and maximum size the column should have. We set a pixel width at the minimum to forbid the columns to shrink too much, and a fractional unit as the maximum to allow them to take as much space as they want.

What it means is this: the grid will try to stack as many children as possible inside the available width until the minimum size is met. In this case, a new row will be created.

## Ok but how do I position stuff?

In CSS frameworks like Bootstrap, you have utility classes to say _start here and span this much columns_ and you can do exactly the same with CSS Grid, using the `grid-column: ? / ?;` shortcut property on the column of your choice. 

There's actually two syntax you can use:

? `? / ?` : Where the first `?` is the starting column and the second `?` is the ending column.
? `? / span ?` : Where the first `?` is the starting column and the `span ?` is the width of the column in `fr` unit.


Let's try different things with our grid:

```
grid-column: 1 / 5;
grid-column: 5 / span 2;
grid-column: 2 / span 4;
grid-column: 2 / span 1;
grid-column: 5 / span 1;
grid-column: 1 / 7;
```

Results in:

<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(70px, 1fr)">
    <div class="code-example-children-grid pattern-dots" style="grid-column: 1 /3">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 5 /span 2">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 2 /span 4">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 2 /span 1">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 5 /span 1">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 1 /7">
        <div class="code-example-value">6</div>
    </div>
</div>

## Ok, what about the rows?

It's basically the same as the columns, except it's for the rows. Use the `grid-template-rows` to declare the number of rows you need. And of course, you can decide where to place each children using `grid-row`, the equivalent for rows of `grid-columns`. It's super useful for art directed pages as you can place everything where you want.

<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-rows: repeat(4, 1fr); grid-template-columns: repeat(6, 1fr);">
    <div class="code-example-children-grid pattern-dots" style="grid-row: 2 / span 1;">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 4 / span 1;">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 3 / span 1; grid-column: 6 / span 1;">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 2 / span 2; grid-column: 3 / span 2;">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 1 / span 4; grid-column: 5 / span 1;">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 1 / span 1; grid-column: 2 / span 1;">
        <div class="code-example-value">6</div>
    </div>
</div>

## All this is quite complicated, is there a simpler way?

It can become messy to work this way, so one final tip for you: the best way to make complex layouts from row and grids is to use `grid-template-area: ??;` and `grid-area: ??;`, a very funky yet super useful combination of CSS grid.

With this syntax, you _draw_ your layout inside a string in CSS, declaring names for each of your child elements. Let's say we have 5 elements that we want to shape like a star. The result would look like this:

```
grid-template-areas: 
"lefttop . righttop"
". center . "
"leftbottom . rightbottom";
```

By doing this, we created a 3 by 3 grid. The `.` character inside the declaration means an element exists but has no name and thus, should be given empty space. Now all we have to do is report those names to our children and _ voila_:

<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example code-example-grid-star" aria-hidden="true">
    <div class="code-example-children-grid pattern-dots" style="grid-area: lefttop;">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: righttop;">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: center;">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: leftbottom;">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: rightbottom;">
        <div class="code-example-value">5</div>
    </div>
</div>

This syntax is very useful for more visual minded people and can lead to great art directed pages. The Smashing Magazine website has a very nice article on the subject on this {https://www.smashingmagazine.com/2018/04/art-directing-web-css-grid/, "page"}.

## I want MOAR!

If you want to train your CSS grid skills, try playing the amazing Grid Garden game on this {http://cssgridgarden.com/, "page"}. If you want more examples but in a sort of short video format, visit this {https://www.youtube.com/watch?v=DCZdCKjnBCs, "page"}. For a complete free video course on CSS Grid, I recommend {https://www.youtube.com/playlist?list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG, "this one"}.

*And that's it for modern layout in HTML and CSS!* 

Congratulations for reading thus far, that was a lot to take! Now let's talk about the content of your pages and about the elements you're going to use to format it!

Next: {order-your-titles-correctly.html, "Order your titles correctly"}

====

NAME: Order your titles correctly
HOST: HTML tips
Bref: How to handle titles in HTML so they are logically ordered and accessible
BODY:


# Order your titles correctly

This one is simple, use `<h1>`, `<h2>`, `h3`, etc... Your page should at least have an `<h1>` and should not jump from `<h1>` to `<h3>` without an `<h2>`. If you want a smaller title, use CSS but don't ruin the semantic for styling purposes! The same applies when, for example, you have a smaller title before the main title. If this happens, change the smaller title to a simple text.

The reason why it is important is because screen readers users have shortcuts that allows them to jump directly to your titles and count on you to organize them logically. In long pages it can rapidly become hard to link to certain parts of your page.  Adding an id and a hidden link to your titles can help your users share specific parts of your page. With this technique, the user can click the title to add the id to the url.

This website actually uses this system. You can find the JavaScript function for this {https://github.com/Thomasorus/Kaku/blob/master/src/module.js, "in the github repo of my parser"} {/kaku.html, "Kaku", Go to Kaku page}.

Next: {organize-your-text-content.html, "Organize your text content"}

====

NAME: Make your links clear and accessible
HOST: HTML tips
Bref: A collection of HTML basic tips to build simple yet modern websites
BODY:

# Make your links clear and accessible

Links are pretty straightforward, you put an `<a>` with an `href` attribute and you're good right? Yes, but often links lack readability due to poor phrasing. Try not using texts like _more_ or _click here_ outside of clear phrases, as they do not convey what's going to happen when you click. Try to have a different texts for each link. 

If you can't use a more contextualized text, then add the `title` attribute in the link with more context inside, and it will provide a tool-tip when the user hover on the link. You will also have to add an `aria-label` attribute with the same contextualized text for screen readers. 

Inside those attributes, don't use the work "link". It's not explicit, it doesn't convey meaning. Also because screen readers already say _link_, your screen readers visitors will hear _Link, Link_.

Last but not least: if you use `target="blank"` to open to a new tab, you have to vocalize it using the same `aria-label` attribute. Just add `(open in a new tab)` at the end of your text so screen readers users know that the previous page is still open.

So the end result might look like this:

```
<a href="/home.html" title="Go to the home page" aria-label="Go to the home page (open in a new tab)" target="blank">here</a>
```

Knowing all this, it's often less work and trouble to just rephrase the link!

Next: {when-to-use-a-button-and-a-link.html, "When to use a button and a link"}


====

NAME: Organize your text content
HOST: HTML tips
Bref: The useful HTML elements when dealing with text
BODY:


# Organize your text content

Remember when I talked about the box-content semantic elements, the `<nav>`, `<main>` and others? Well there's a _lot_ more of them for the text. If you care enough, you can probably find a semantic HTML element for anything. Here's a few that you should use:

## text blocks with `<p>`

If you don't know what to use for your block of text, your probably need a paragraph. Paragraphs come with a natural margin that makes them readable even without adding style. Paragraphs are good, use them!

## Citations with `<blockquote>`

The good old quote we often see in articles! It can actually comes with the `<cite>` element and attribute to help you sources your quotes, as well as a `<footer>` to indicate the end of the quote and its author. Take a look at the specifications on {https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote/, "this page"} to make better quotes.

## Lists with `<ul>`, `<ol>`, `<dl>`

If you enumerate something (text, links, etc...) you probably should add them in a list. Lists are useful for screen readers users as they are announced as a list with the total number of elements inside. Then when reading each entry, the screen reader voices its position.

`<ul>` with `<li>` inside creates an unordered list with bullets:

- Element A
- Element C
- Element Z

`<ol>` with `<li>` will create an ordered list with numbers for each element:

+ Element 1
+ Element 2
+ Element 3

`<dl>` is not very popular but is super useful as it's a definition list. Most people still use two columns tables for definitions, but this is way better for screen readers users. 

? Term 1 : Definition 1
? Term 2 : Definition 2
? Term 3 : definition 3

Of course all those lists come with their basic design, but please note that you can change them very easily. You can make your lists go in a single line, change their separation, or even use a custom image instead of dots! Just be careful to not put informative content as a decoration, as it will not be vocalized. Also when reading the source code of a page, HTML are very easy to understand.

## Pre-formatted text with `<pre>`

If you have to present some code, it's probably good to wrap it inside a `<pre>` tag to preserve its formatting. Please note that you should also use the inline semantic `<code>` element (we'll talk about it later in these pages).

## Make breaks with `<hr>`

The `<hr>` element is to indicate a break inside your content: a kind of pause, a change of subject. You could think that the old `<hr>` element is useless when we can style these breaks with CSS, but they indicate to screen readers users that they can take a break too! 

Next: {all-about-images.html, "All about images"}

====

NAME: All about images
HOST: HTML tips
Bref: How to make images optimized, responsive and easy on bandwidth
BODY:

# All about images

Just as links, images can feel pretty straightforward. Put an `<img>` tag, an `src` and an `alt` attributes and you're good right?!

Well yeah but... what if we could do much more, like loading the right image size depending on viewport, let the browser decide between image formats or even only load images when they are in the viewport?

## Load the right image size and density

The `<img>` element has an attribute `srcset` that allows you to add several links to several versions of your image. You can do two things with `srcset`:

+ Ask the browser to change the image depending of the width of the viewport.
+ Ask the browser to change the image depending of the pixel density of the display.

In the example below, I have 4 versions of the same image that I want the browser to use when the viewport is less than 300, 600, 900 and 1200 pixels in width:

```
<img 
src="img-1200.jpg" 
srcset="img-300.jpg 300w, img-600.jpg 600w, img-900.jpg 900w, img-1200.jpg 1200w" 
/>
```

And for pixel density for 1k, 2k or 4k screens:

```
<img 
src="img-1k.jpg" 
srcset="img-1k.jpg 1x, img-2k.jpg 2x, img-4k.jpg x4" 
alt="this is an image"
/>
```

But you can also combine them, for example for a favicon:

```
<img 
src="icon32px.png"
"icon32px.png 32w, icon64px.png 64w, icon-retina.png 2x icon-ultra.png 3x icon.svg"
alt="this is an image"
/>
```

This way you are sure you only load the right size or density for your readers.

## Load the right image format

You maybe saw it before and wondered what was the `<picture>` element good for? Well it's quite simple, it's used to contain several `<source>` elements and an `<img>` element. 

The `<source>` elements are used to give alternate versions of the same image. The most obvious use-case is to load several formats to allow to browser to pick the lighter if it supports it.

Let's take an example with a `jpg` and a `webp`. 

```
<picture>
    <source srcset="img1.webp" type="image/webp">
    <img src="img1.jpg" alt="this is an image" />
</picture>
```

If the browser supports the webp format, it will automatically use the webp file instead of the jpg. Please note that if the browser does not support the `<picture>` element the `<img>` one will still work, so there is no good reason to not use them.

## Lazy loading images

Lazy loading has become native in most browsers and is quite simple to use: `loading:"lazy"` on your `<img>` element and you are good to go. They are several ways of doing lazy loading for older browsers who don't support this feature. All of them require to use JavaScript. If you want to support old browsers, take a look at this {https://css-tricks.com/the-complete-guide-to-lazy-loading-images/, "article"}.


## Combine all this together!

But you don't have to choose between all these features, you can combine them to have images at the right size, of the best type, only loaded when in the viewport, and allt his only in HTML.

```
<picture>
    <source 
    type="image/webp" 
    srcset="img-300.webp 300w, img-600.webp 600w, img-900.webp 900w, img-1200.webp 1200w">

    <img 
    loading="lazy" 
    src="img.jpg" 
    srcset="img-300.jpg 300w, img-600.jpg 600w, img-900.jpg 900w, img-1200.jpg 1200w" alt="The happy hacking keyboard">
</picture>
            ```

Knowing that images are the most heavy thing loaded by websites, it's incredible that this syntax isn't more known and used!

Next: {all-about-video-and-audio.html, "All about video and audio"}


====

NAME: All about video and audio
HOST: HTML tips
Bref: Tips and tricks about video and audio codecs for the web and how to use the audio and video elements
BODY:

# All about video and audio

The `<video>` and `<audio>` elements are super easy and convenient ways to embed multimedia content on the web without relying on a third party. But if the tags are very straightforward, the video and audio formats can be a headache.

You have a lot of formats available but most of them are not supported on every browser. To make it quick you have containers and you have codecs. Containers are the format of the file, the `.mp4` for example. Codecs are the compression algorithm used.

So which video codec should you use?


## The video codecs and containers supported on the web

If you are in a hurry and can only produce one export, go with the h264 video codec and MP3 audio codec in a `.mp4` container. It will run everywhere. If you think your Firefox users have the AAC codec installed on their machine, you can replace the MP3 codec by AAC as it has better sound quality.

If you want high quality and compression you will have to export your videos two times and do this combination:

? Apple machines : A `.mp4` container with h265 video encoding and AAC audio encoding.
? Others : A `.webm` container with AV1 video codec and probably Opus for audio encoding.

If you only want open source and cover a maximum of machines, the best combination is probably a `.webm` container with a vp8 for video encoding and mp3 for the audio (mp3 is open source since 2017). Be careful as this won't work in Safari until Safari 14.

## The audio codecs and containers supported on the web

Basically if you want to archive some audio or put in on the web so people can remix it, you'd better use a lossless audio codec and in this case, FLAC is the king, being compatible with almost everything.

If you are putting audio for streaming and want a good quality, the AAC codec in a `.mp4` container is probably a good pick, but be careful of Firefox users without the codec on their systems. For them you can use the Vorbis codec with a `.ogg` container.

If you don't care about quality and just want everything to work, go with `.mp3`.


## Wait, I can pick two?

That's the beauty of it, just like with the `<picture>` element, you can add multiple sources to your `<video>` and `<audio>` elements and let the browser choose. 

```
<audio controls>
 <source src="foo.opus" type="audio/ogg; codecs=opus"/>
 <source src="foo.ogg" type="audio/ogg; codecs=vorbis"/>
 <source src="foo.mp3" type="audio/mpeg"/>
</audio>
```


## Save bandwidth with these simple tricks!

The `preload="metadata"` attribute only loads the metadata of your files like the first frame or its length until the user plays the file. And if you want to save even more data, use `preload="none"`. In the case of a video, the preview will be totally dark but that can be mitigated by using the `poster` attribute with a link to an image.

Finally, you should know that converting animated gif to videos often result in radically smaller files, and you can trick the user in believing a gif is being played!

## The multiple configurations of the video player

The `<video>` and `<audio>` elements comes with a set of attributes that allows you to tweak how they act. The `<audio>` element is often left untouched but the `<video>` one has several attributes that allows it to act as a video player or as a fake gif!

Make a traditional video with the `control` attribute:

```
<video controls" src="path to video" type="video/mp4"></video>
```

Make a fake gif from a video using those attributes. `loop` will restart the video, `mute` will remove sound and `autoplay` will start it automatically. Be careful as `autoplay` will not respect the `preload` attribute, making the video downloaded instantly.

```
<video autoplay loop mute src="link to fake gif video" type="video/mp4"></video>
```

Finally, please note that the `playsinline` attribute prevents videos from playing full screen on mobile when launched. If that's not the behavior your want, don't forget to add it.

Next: {doing-forms-correctly.html, "Doing forms correctly"}

====

NAME: Doing forms correctly
HOST: HTML tips
Bref: A deep explanation about accessible forms and error handling in HTML
BODY:

# Doing forms correctly

Forms are incredibly complicated to get right from an accessibility standpoint. I don't know all the good practices but I've seen some bad ones that I can warn you about. Please contact me if you find a mistake in this section as I really am not 100% sure about everything.

## Forms require strict HTML

With more people validating forms with JavaScript, we've seen a drop in code quality of forms. But the reality is quite simple: if you forget about some parts of the form, screen readers users will ne know they are in a form to begin with!

+ A form starts and ends with the `<form>` element even if you validate it with JavaScript. Also add an `id` to it.
+ Each `<input>`, no matter its type, needs and `id` and a `<label>` with the `for` attribute pointing to it. 
+ If you have a multi-section form, regroup them with the `<fieldset>` element and add the `<legend>` element as the "title" of this fieldset.
+ End your form with a `<button>` when you can, use the `for` attribute to point on the form's id, and use an `aria-label` to give more context.

For accessibility reasons:

- Use contextualized text for your labels, be precise about what each input is about! If you can't have a clear label, same as links: add a `title` attribute to the input as well as a `aria-label`.
- Don't rely on the `placeholder` attribute for examples of what is expected! The placeholder text is often hard to read and disappears once the input becomes active, making it difficult for users with cognitive impairment.
- If you want to add an example of what is expected from the user, you can either add it directly in the label (often not very accepted by designers) or add it below the input and then refer to it with the `aria-describedby` attribute (see example below). Using this, screen readers will first read the label, then the `aria-describedby` text in one go.

Wrapping it up, here's an example that you can inspect with your browser's developer tools:

<span class="visually-hidden">This is a form demo below, not a real one, don't activate it!</span>
<form id="monsters">
  <fieldset>
    <legend>Choose your favorite monster</legend>
    <small id="error" style="color:red; display:none;">Error: you need to choose a monster.</small><br/>

    <input type="radio" id="kraken" name="monster" aria-describedby="kraken-desc">
    <label for="kraken">Kraken</label><br/>
    <small id="kraken-desc">The kraken is a kind of giant squid.</small><br/>

    <input type="radio" id="sasquatch" name="monster" aria-describedby="sasquatch-desc">
    <label for="sasquatch">Sasquatch</label><br/>
    <small id="sasquatch-desc">The Sasquatch is a kind of giant ape.</small><br/>

    <input type="radio" id="mothman" name="monster" aria-describedby="mothman-desc">
    <label for="mothman">Mothman</label><br/>
    <small id="mothman-desc">The Mothman is a kind of giant moth.</small><br/>
  </fieldset>
</form>
<button type="submit" form="monsters" value="Submit" aria-label="Validate the monsters form">Validate</button> 

That's it for the code, but more often than you think, bad forms are the result of non inclusive design practices, some of which we will see below.

## Information below forms

Ever filled a form and right under the validate button, seen a wall of text written in 10 pixels size that is actually the terms and conditions? Well that can be a problem!

Most forms end with words like _Continue_ or _Validate_ and by doing so, suggest that the page is finished. A screen reader user can't know there's something else below. 

This problem can be super tedious to explain to designers as most of them don't want a wall of text before the form, and don't ever suggest this to a marketing team! So an accessible solution is to simply use an invisible anchor link pointing to the wall of text right before the form starts.

Screen readers users are humans too, they dislike walls of text about legal stuff like anyone else! This solution allows them to either read it or even better, skip it, like we all do _right?_

## Don't put text sections inside a form!

You probably already tried to tab between inputs in a form. That's because inputs are capturing elements that *you can only escape by using the tab key*. And when you do, *the tab key will lead you to the next native focus-able element* like another input, a button or a link. 

It's important because too many designers put big explanation texts about the form between inputs. Since screen readers users can only use the tab key to get out of an input and will land on the next focus-able element, they will not have the explanation texts vocalized and have no way of access them. We saw that `aria-describedby` can be used to link a for to a descriptive text, but that's applying bandage on a broken leg.

Removing texts sections inside forms might seem like a chore and, when talking about it with designers, they will probably tell you it's a going to make the whole experience bland or suffocating in the case of massive forms. 

But the reality is that *a form that needs explanation texts between inputs is a bad design right from the start*. You should give all necessary information before filling the form, otherwise users might start filling it and realize in the middle they didn't have to, or are not concerned about it. 

Your labels with the descriptions attached should be enough to make it a pleasant and understandable experience. Yes forms are not fun but we can't sacrifice usability to some _funnel_ concept marketers enjoy to create.

## Handling errors in forms is a pain

Handling errors in forms is super complicated and nobody seems to agree about how to do it correctly. It's especially hard with accessibility in mind, and not only because of screen readers. So take my advises with a grain of salt as I may be wrong on some cases and am still learning about this.

The first rule to respect is that triggering error messages should only happen either when the user tabs out of the input or when their user validates the form. Don't trigger error messages while the user is typing. Wait for him to go out of the input or it will be a vocalized nightmare or a panic inducing behavior. You might think that's counter-intuitive as screen readers users may not know that they wrote it wrong but that's actually OK if you do the following right.

When the user validates the form using the button, if an input is required and not filled or wrongly filled, move the user focus to this problematic input using the `.focus()` function in JavaScript. This way the user can promptly fill or fix it, then go back below super fast to validate the form again.

To error message should be added the same way as the instructions, with an `aria-describedby`. You can actually have two `id` as a value for `aria-describedby`, so screen readers will read the label, then the description, then the error message.

For the sake of the example, imagine we did not choose a monster below and tried validating the form. In JavaScript, we should add the `error` id to each input's `aria-describedby` so screen readers can vocalize the error message, and remove the `display:none` from the error message itself so non-screen readers users can see it too.

<span class="visually-hidden">There is a form demo below, you can inspect it using the development tools.</span>
<form id="monsters">
  <fieldset>
    <legend>Choose your favorite monster</legend>
    <small id="error" style="color:red;">Error: you need to choose a monster.</small><br/>

    <input type="radio" id="kraken" name="monster" aria-describedby="kraken-desc error">
    <label for="kraken">Kraken</label><br/>
    <small id="kraken-desc">The kraken is a kind of giant squid.</small><br/>

    <input type="radio" id="sasquatch" name="monster" aria-describedby="sasquatch-desc error">
    <label for="sasquatch">Sasquatch</label><br/>
    <small id="sasquatch-desc">The Sasquatch is a kind of giant ape.</small><br/>

    <input type="radio" id="mothman" name="monster" aria-describedby="mothman-desc error">
    <label for="mothman">Mothman</label><br/>
    <small id="mothman-desc">The Mothman is a kind of giant moth.</small><br/>
  </fieldset>
</form>
<button type="submit" form="monsters" value="Submit" aria-label="Validate the monsters form">Validate</button> 


Because of all this and contrary to popular practices, *it's forbidden to disable a form button*, even if the user made errors or did not finish filling the form. If the validation button is disabled it disappears from vocalization and the user has to travel through the whole form to find which input is not good. This is less practical than sending him directly to the input when the button is clicked.

Applying this can be tricky on legacy applications that handle errors in a monolithic way. Even if you do front-end surface level error checking, the user might make a typo that can only be identified when the form is sent and the back-end discovers it by using Information stored in a database. If this happens, the error handling in the back-end needs to be written in a way that returns which information is wrong, to allow the front-end to `.focus()` on the wrong input. 

If the back-end returns a vague message then the front-end can't do anything outside using `.focus()` to move the user to a standard error message, and the user has to redo the entire form and find by himself what he did wrongly. This is a super bad user experience even for non-disabled users.

The best solution is of course to do error checking on the back-end on each input with an ajax call right after the user exits it. But for various reasons going from time to cost of requests, it's not always possible.

Good luck with your forms and more than anything, *test your forms with real users, disabled or not, to find out if everything is ok*. On this particular subject, you can't trust yourself, you client, product owner, designer or common tester. You need real, fresh experience.

Next: {tables-are-not-that-complicated.html, "Tables are not that complicated"}

====

NAME: Strong b em and i
HOST: HTML tips
Bref: What's the deal with strong, b, em and i in html? Which one I pick?
BODY:


# `<strong>` versus `<b>` versus `<em>` versus `<i>`

Here we are, at the doors of the great war of semantic inline elements. So who's right between `<strong>` and `<b>`? Who wins between `<em>` and `<i>`?

Well, they all win.

Everyone is a winner excepts us the developers who have to implement this. Let's try to explain this strange situation. 

Imagine a website for a touristic area with a cliff:

- The `<b>` tag is used to draw the reader's attention. So it should draw attention to the cliff: "This wonderful area has a forest but also a <b>wonderful cliff</b>".
- The `<strong>` tag is to indicate the importance and seriousness of something. So it should warn people about the cliff: "Please be careful near the cliff as *there are no ramps to prevent you from falling and the winds are strong*".
- The `<i>` tag is used to indicate that something is set off from the normal prose. For example it should be used for the foreign name of the cliff: "This cliff name is <i>mh'irr'la</i>" or the thoughts of someone thinking about the cliff: "<i>Is the cliff really in love with me or is it just a farce?</i> thought Jonathan".
- The `<em>` tag is used to stress something on the subject, almost as if you speak it aloud. So it should help denote something about the cliff: "Ah yes, the _cliff_, the one that is actually 2 meters tall".

I hope it makes sense. The sad reality is that no one writes prose in HTML, so you'll probably be stuck with whatever the <abbr title="What you see is what you get">wysiwyg</abbr> editor or markup language parser of your choice decided to use. For example this page is written using {/kaku.html, "Kaku", Go to Kaku page} who compiles to `<strong>` and `<em>` by default. 

Next: {other-kinda-useful-semantic-elements.html, "Other kinda useful semantic elements"}

====

NAME: When to use a button and a link
HOST: HTML tips
Bref: Buttons and links are used for different things, here's an explanation
BODY:


# When to use a button and a link

For most document type websites the question between links and buttons doesn't really exist. But in application type websites, it's often that developers don't pick the right one or that designers make links look like buttons. 

So to make it clear:

- An `<a>` is for a page change or a new tab. When changing page, a screen reader user will be automatically moved to the top of the page and will start reading it from there.
- A `<button>` is for activating something like a modal or a form. Once pressed, even if things change in the page, it doesn't move a screen reader user somewhere else and it doesn't vocalize anything.

This difference of behavior is super important, especially in single page JavaScript web applications where urls are changed dynamically, but no page change is triggered in the browser! When such a thing happens, the developer has to manually move the focus of the screen reader user to the next point of interest inside the app and vocalize what happened and where the user is.

To do this, the developer has to use the `.focus()` function in JavaScript. I'm not 100% sure about how to vocalize the page change so I'm not gonna give any advice on this. If you know good practices please {now.html, "contact me"} so I can update this part.

One last thing: I don't care about your reasons, don't replace a `<button>` by a `<div>`.

Next: {strong-b-em-and-i.html, "The mess of strong b em and i"}

====

NAME: HTML interactive elements
HOST: HTML tips
Bref: Interactive HTML elements are like small native components that can help in some situations
BODY:


# Some cool HTML interactive elements

You might not know these but they can be super useful. Their main default is that they are sometimes hard to style properly.

? `<details>` and `<summary>` : Allows you to make a kind of accordion box in pure HTML. By default closed but the `open` attribute on `<details>` can make it open.
? `<datalist>` : Can be used as an input with a list of options auto-suggested by what the user is typing.
? `<progress>` : A progress with several attributes for showing progress. It's very hard to style correctly but you can have the same accessibility by using the `role="progressbar" on a div.

<details>
  <summary>Click me for a code demo</summary>
  [media/dio.jpg, You though it was code but it was me Dio!"]
</details>

A datalist can be useful but requires a full form, which is quite a lot of code:

<label for="jojolist">Choose a Jojo character from this list:</label><br>
<input list="jojo" id="jojolist" name="muchJojo" />
<datalist id="jojo">
  <option value="Jonathan">
  <option value="Joseph">
  <option value="Jotaro">
  <option value="Josuke">
  <option value="DIO">
</datalist>


A progress bar using `<progress>` has this look:

<progress aria-valuenow="20" aria-valuemin="0" aria-valuetext="Step 2: Copying files... " aria-valuemax="100" style="display:block; width:100%;">20 %</progress>


Use the `role="progressbar" to style it more easily:

<div style="border:1px solid black">
<div role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" class="pattern-dots" style="width:20%; text-align:center;">20 %</div>
</div>


====

NAME: Other kinda useful semantic elements
HOST: HTML tips
Bref: The HTML elements you probably don't know but that could be useful in some situations
BODY:


# Other kinda useful semantic elements

Below are elements often complicated to add if you use a CMS or a markup language like Markdown as they don't give syntactic shortcuts for most of them, so you have to write them by hand. 

Favor these semantic elements when working for very specific projects where text cannot always convey all the meaning by itself. If you have a design system, incorporating could probably be easier too.

? `<abbr>` : Stands for abbreviation. Can be used for currencies for example.
? `<code>` : For code, obviously, often best used with `<pre>`.
? `<time>` : For time values of course.
? `<mark>` : To highlight some parts of your text.
? `<s>` : Strikes the text to indicate it's no longer relevant. Don't confuse it with `strike` who just strikes the text for... design?
? `<del>` & `<ins>` : If you have an edit to make to a text and want to keep trace of the change `<del>` and `<ins>` are a good pick!

Next: {html-interactive-elements.html, "Some interactive elements that can be useful"}


====

NAME: Tables are not that complicated
HOST: HTML tips
Bref: How to do accessible tables (it's not that complicated)
BODY:

# Tables are not that complicated

There isn't a lot about tables that is not already well known. For accessibility you might want to be careful of a few things.

The `<caption>` element should be added to all your tables as sort of title for this table. It will inform all users what the table is about: `<caption>I'm a table title!</caption>`. Use the `scope="col"` on your `<th>` columns to explain to screen readers that the element is a the start of the column and `scope="row"` for the same `<th>` elements that start rows. 

If you need to make more complicated tables accessible, try take examples in the MDN documentation on this {https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Advanced, "page"}.

Next: {make-your-links-clear-and-accessible.html, "Make your links clear and accessible"}


====
NAME: CSS good practices
HOST: Html tips
BREF: CSS Good practices to optimize file size and specificity and not hate CSS
BODY: 

# CSS Good practices to optimize file size and specificity

In the past CSS had such limitations and was so badly understood by most developers that using frameworks or libraries was seen as the only way to get things working. {https://getbootstrap.com/, "Bootstrap"} was the king of CSS frameworks and with it came a ton of code that was most often not used at all. The only usable alternative was probably {https://get.foundation/, "Foundation"} or SASS libraries like {https://www.oddbird.net/susy/, "Susy"}.

Fortunately today we have a lot of choice! We still have Bootstrap, but also lighter alternatives like {https://bulma.io/, "Bulma"} or totally different propositions like the utility first {https://tailwindcss.com/, "Tailwind"}. Also tools like {https://purgecss.com/, "Purge CSS"} can help reduce the size of CSS bundles by removing the unused parts of CSS frameworks.

In reaction to fully equipped frameworks we've also seen class-less CSS frameworks rising in popularity for a few years and they come with the promise of a small file size that correctly styles a website with only the HTML elements. That indeed sounds like a smart idea as it forces the developer to use {what-is-semantic-html.html, "semantic HTML"}.

But if you have to extend this kind of framework with your own design and don't want to use classes, you're going to create more troublesome code that you think.

## Enters specificity

> "Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Specificity is based on the matching rules which are composed of different sorts of CSS selectors.", MDN, About specificity, https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity

So what are the more specific and less specific things you can meet in CSS? Here's a list from more to less specific:

+ IDs
+ Classes, attributes and pseudo classes
+ Elements and pseudo elements

Knowing this, some practices can create a lot more specificity than others. Among them, these are the worst:

- Using IDs as they are single use.
- Nesting selectors, for example `.navigation .navigation-list` doubles the specificity of the later and prevents it from working outside the former.
- Qualifying selectors, the action of sticking a class to a specific HTML element like `ul.navigation`

Specificity is why a lot of people hate CSS:

- It makes it hard to extend an existing code base if everything is super specific
- It can trigger repaints of existing elements, thus creating flashes when loading the website
- It makes the code super verbose and hard to maintain
- It creates code segments that can't be reused in another situation

So as you can see, it's not just a technical thing but a good practice methodology to take specificity seriously.

## Chain elements or use a class?

To come back to our no-class CSS topic, we find ourselves in front of a dilemna.

Let's say you want to add red to your links located in a list in the navigation of your website, using only HTML elements and no classes. It would look like this:

```
nav ul li a {
    color:red;
}
```

Since browsers read CSS from right to left, each time they meet a new element in this declaration, they have to re-compute the design. This is how the browser interprets this chain:

+ _I style links to red_
+ _Wait it's only links in lists that need red_
+ _Crap, it was only links in lists in the navigation that need red_

Unless you have a terribly big CSS file that takes a lot of time to be parsed and triggers a lot of refresh, of course you will not see this happening. But this is still happening under the hood.

Now let's compare this to a simple utility class:

```
.redcolor {
    color:red;
}

<a class="redcolor">
```

With this code, the browser only thinks _if I see a redcolor class, I add red_. And that's it, no repaint, no problem. But here's the thing: *chaining HTML elements is calculated as less specific than using a class*.

So who is right and who is wrong? The browser is right, but ultimately, the no-class CSS is worse:

- It's more verbose
- It's harder to extend the existing code and will get even more verbode when doing so
- It can't be reused in another context since it's tied to specific parents

So in the end, using class is a better idea. The no-class CSS methodology is good, but only works as a starter point for global elements.

## Tips and tricks for your CSS

So in the end what should you do if you want to maintain small CSS file size and low specificity? Here are some rules that you can apply to almost every project:

- Style HTML elements for broader usage. The moment you start chaining them means you need a class
- Never nest or qualify classes and instead, use a simple yet effective naming methodology like {http://getbem.com/introduction/, "BEM, Block Element Modifier"}
- Try to organize your CSS file with less specific elements at the top and ery specific elements at the bottom, which is often refferred to the {https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/, "Inverted Triangle"} methodology
- Using a methodology like BEM might help you think about your CSS classes as objects than can be reused and extended, a good practice called {https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/, "Object Oriented CSS"}

You can check your specifity using this {https://specificity.keegan.st/, "specificity calculator"} and check if your file has his specific code in order (from less to more) using this specificity {https://jonassebastianohlsson.com/specificity-graph/, "graph generator"}.

By doing this your code will be lighter, easier to maintain, reusable and extendable like objects, and won't trigger repaints.

====

NAME: 2019
HOST: tracking
BREF: All things I read, watched in 2019
BODY:

# 2019 Overview

## Readings of 2019

All the things I read in 2019.

`...` Means the series is still ongoing but that I started it in 2019

### Novels

- The Remembrance of Earth's Past trilogy - Liu Cixin
- The unfathomable depth of loneliness - Hao Jinfang
- The Book of the New Sun Vol.1 - Gene Wolf 
- Viking Mythology - Neil Gamain

### Mangas

- Beastars...
- Vinland Saga...
- Kingdom...
- Yagate Kimi ni Naru (Bloom into You)
- Shamo
- Sun Ken Rock
- Kusuriya no Hitorigoto...
- Goblin Slayer...
- Blame! (reprint)
- Aposimz...
- No gun's life...
- At the Mountains of Madness (Lovecraft by Gou Tanabe)
- In the abyss of time (Lovecraft by Gou Tanabe)
- Shishunki Renaissance! David-kun
- Gunnm (reprint)
- Gunnm Last Order
- Gunnm: Mars Chronicles...
- Blue Giant
- Saltiness

### Comics

- Shangri La
- Mecanique Céleste

### Art books

- Gustave Doré (Catalogue d'exposition Gustave Doré - Musée d'Orsay)
- Katsuya Terrada Real Size

### Magazines

- L'étiquette 1 & 2
- Atom Magazine

### Notable articles

- {https://www.newyorker.com/magazine/2019/12/16/how-william-gibson-keeps-his-science-fiction-real, "How William Gibson Keeps His Science Fiction Real"}
- {http://paulgraham.com/genius.html, "The Bus Ticket Theory of Genius"}
- {http://www.slate.fr/story/184164/boulangeries-guerre-culturelle-pain-adieu-baguette-disparition-petit-commerce, "La France du pain est coupée en deux"}
- {https://www.nytimes.com/interactive/2019/11/16/world/asia/china-xinjiang-documents.html, "Absolutely No Mercy: Leaked Files Expose How China Organized Mass Detentions of Muslims"}
- {https://www.forbes.com/sites/johnkoetsier/2019/09/02/hong-kong-protestors-using-mesh-messaging-app-china-cant-block-usage-up-3685/, "Hong Kong Protestors Using Mesh Messaging App China Can't Block"}
- {https://matthiasott.com/articles/into-the-personal-website-verse, "Into the Personal-Website-Verse"}
- {https://www.gamekult.com/actualite/une-petite-histoire-du-jeu-de-baston-en-dix-morceaux-3050819125.html, "Une petite histoire du jeu de baston en dix morceaux"}
- {https://www.newyorker.com/magazine/2019/04/08/the-day-the-dinosaurs-died, "The Day the Dinosaurs Died"}
- {https://kotaku.com/how-biowares-anthem-went-wrong-1833731964, "How BioWare's Anthem Went Wrong"}

## Writings of 2019

All the things I wrote in 2019.

### Wrote

- {https://www.redbull.com/fr-fr/evo-2019-tournois-esport-infos, "L’EVO 2019, le plus gros tournoi esport du monde"}
- {https://www.redbull.com/fr-fr/lethal-league-blaze-esport, "Lethal League Blaze, l’autre jeu de combat qui ne dit pas son nom"}
- {https://www.redbull.com/fr-fr/samurai-shodown-esport-jeu-combat, "Samurai Shodown, l’original outsider de l’esport baston"}
- {https://twitter.com/Thomasorus/status/1144623832587821056, "Embrasser, étendre, étouffer le podcast"}
- {https://basgrospoing.fr/fr/articles/la-schizophrenie-street-fighter-iii-third-strike, "La schizophrénie Street Fighter III: Third Strike"}
- {https://www.redbull.com/fr-fr/mortal-kombat-pro-kompetition, "Premières fatalities sur Mortal Kombat XI"}
- {https://www.redbull.com/fr-fr/rza-mortal-kombat?linkId=65552039, "RZA : une main de velours dans un gant de ninja"}

### interviewed

- {https://twitter.com/Vincent_Jule/status/1144341580771409921, "Samurai Shodown: Le retour d'une franchise culte... et un nouvel âge d'or du jeu de combat?"}

### Published

- {https://basgrospoing.fr/fr/articles/theorie-ruissellement-jeu-de-combat-esport, "Trickle-Down Economics in the FGC and E-Sports"}

### Played

- Flappy Fighter
- Untitled Goose Game
- Mortal Kombat XI
- Samurai Shodown 2019
- Apex Legends
- Furi
- Thumper
- Céleste
- Hollow Knight
- The Red Strings Club
- Tekken 7
- Disco Elysium
- A Plague Tale: Innocence

### Coded

- {https://podcastouvert.fr/, "Podcast Ouvert"}
- {https://claviers-mecaniques.fr/, "Claviers mécaniques") - Frontend
- {https://happy-tereshkova-b21ae0.netlify.com/, "Art Eater"}
- {https://github.com/Thomasorus/Podcast-player, "A podcast player"}
- {https://github.com/Thomasorus/UI-concept-tests,"Some concepts for UIs"}
- {https://github.com/Thomasorus/wiki-engine, "My wiki engine"}
- A ton of interfaces at work with accessibility
- Web components with accessibility

## Watched in 2019

All the things I watched in 2019.

... Means the series is still ongoing but that I started it in 2019

### Anime

- Carole & Tuesday
- Sailor Moon S1 (original show)

### Movies

- Promare

### Documentaries

- 10 years with Hayao Miyazaki

### Series

- Mindhunter

### Tv shows

- Terrace House

### Notable videos

- How Mind Control Saved Oddworld: Abe's Oddysee
- The Real Fake Cameras Of Toy Story 4


====

NAME: Empty and Full
HOST: Stories
BREF: A story about flowers and brambles
BODY:

# Empty and Full

The story of *Empty and Full* narrates how {the-first-one.html, "The First One"}, an immortal being tries to restore balance in an universe he subverted. The whole saga is divided into three major stories: Eat The World, Boxes Filling Space and a third unknown story.

Globally, *Empty and Full* is used a playground to experiment storytelling and painting, but also to question personal philosophical interrogations.

====

NAME: The First One
HOST: empty and full
BREF: The first one is the main character of Empty and Full
BODY:

# The First One

The *First One* is the main protagonist of {empty-and-full.html, "Empty and Full"}.

## Eat The World

He was born onto one of the {flower-houses.html, "Flower Houses"} and as the only descendant of his family, the direct heir to inherit a Flower House. His mother died giving him birth, making his father resent him. He grew in solitude and was given a strict education that left him without space to breathe.

At the {age-of-trial.html, "Age of Trial"}, he was sent to war, like all others of his kind. As the only heir of his family, he should been given a secure position during his two cycle service. Unfortunately, his father opponents maneuvered to place him in the battlefield, hoping for its death and the possibility to inherit his family's Flower House.

During his two cycles service, The First One managed to survive all the battles he was sent to. He made a lot of companions among the Brambles Folks, broadened his horizons and developed a profound anti-war and anarchist attitude. Unfortunately, he was injured during his last battle at the end of his two cycles service. He lost his two arms and was heavily disfigured. Not capable of fighting, he was sent home where he discovered died not long ago.

Not willing to have children and incapable of handling most political and administrative tasks he inherited with the Flower House, he called his ancient war companions for help. As law forbids to inherit a Flower House when its owner is still alive, The First One organized its own as an anarchist organization and drafted a testament where he gave away everything he had to its group.

After a few years later, once all the talks about his political choices disminished, he announced to his closest companions his will to free all the slaves living on his Flower House. By doing so, he hoped it would encourage a more global slave revolution on the other Flower Houses. He also said his Flower House should be open to anyone and that it's wealth should be shared with the Brambles Folk.


====

NAME: Age of Trial
HOST: Empty and full
BREF: The explanation about the age of trial
BODY:

# Age of Trial

The Age of Trial is the age kids are sent to participate into the War on Brambles. They have to serve for two cycles before going home. Depending on their social standing they are given different roles. The most fortunate are given strategist and secure positions to ensure their families won't lose them. The common people are trained to battle and a lot of them never goes back home.


====

NAME: It Eats The World
HOST: Empty and full
BREF: The first part of the empty and full series
BODY:

# It Eats The World

It Eats the World is the first arc of {empty-and-full.html, "Empty and Full"}. It tells the story of several beings led by The First One, a creature betrayed by its kind seeking revenge. As he refused to be taken to eternal rest by its own God so he could take revenge, he concluded a pact with The Brambles and became an enslaved immortal.

As both the vessel and slave of The Brambles, he then proceeded to recruit other outcasts and shared his powers with them. Together they started a general war with the goal of destroying void itself by filling it with The Brambles.


====

NAME: Flower Houses
HOST: Empty and full
BREF: FLower houses are giant flower capable of containing entire populations
BODY:

# Flower Houses

Flower Houses are gigantic habitable flowers. They mostly belong to wealthy families, who use the light and warmth to grow food and medicinal plants. As it's almost impossible to grow anything into the Brambles, Flower Houses provide a massive amount of the global food consumed.

Products from the flowers themselves or their leaves are also used to create luxurious goods, rare medicine and elaborate clothing. Most Flower Houses rely on enslaved Bramble Folks for their workforce, promising them a better life, sunlight, absence of war.

====

NAME: FLower harvesters
HOST: Empty and full
BREF: FLower harvesters are a cast specialized in finding flower houses
BODY:

# FLower harvesters

FLower harvesters are a cast of specialized biologists trained to art of survival in the brambles. Most of the time, they are hired for many years by privilegied individuals looking for new flower houses. When they find a potential flower house, they note its location by going at the top of the brambles and looking at the starts. Then they rate the flower chance of survival and if it can't survive or grow big enough to form a new house, they harvest it or leave it alone.

The hunters are easily identified by their full black clothing, their strange mask or their darkened skin color. Hunters are also a rarety. They require several years of education before being able to explore the brambles and a lot of them die in their first years. Despite what most people think, they are not a cult and don't worship any specific god. They also don't obey any flower governement, as there's no governing entity in the brambles.

FLower harvesters all share the basic same equipment:

- Shears, saws and blades to cut brambles and going forward
- Full black clothes to avoid being detected
- Localisation and mapping tools compass, paper maps and sextans
- Hunting tools : bow and arrows, traps
- A portable greenhouse where they repot small flower they harvested (to be resold later)

The rate of flower discovery has been increasing as hunters became more efficient in their survival craft. But not the rate of habitable flowers remain low. The last discovered flower house was 317 units ago.

====

NAME: The Brambles
HOST: Empty and full
BREF: The brambles are a mythological plant asserving the world of Empty and Full
BODY:

# The Brambles

The brambles are a mythological plant asserving the world of Empty and Full


==== 

NAME: My ideal phone
HOST: Knowledge
BREF: What I wish from a phone
BODY:

# My ideal phone

The advancement in do it yourself and open source electronics for phone parts made me think about what would be my ideal phone. What I'd love is a productivity phone with a touch of audio capabilities for leasure.

Ideally the hardware would have:

- A physical keyboard like the Blackberry phones
- An energy efficient and readable small screen
- A 4G antenna to allow sharing connections
- An USB-C port for charging and data transfer
- A headphone jack for music and microphone
- A big storage capacity

On the software side:

- Phone calls and texts of course
- The ability to use contacts, calendars and notes from a third party provider instead of storing it locally
- A podcast app with search on the Apple directory, download andd play
- A music application that can play local files but also download them from a private library
- A few utility and productivity apps like calendar, calculator, notes, etc...
- A few discussion apps for open source services like signal and connections

And that's it. Not having a browser would be a huge change as I am addicted to distractions coming from it. No camera is not a huge deal as I would probably buy a dedicated camera instead. The lack of GPS could be bothersome but I don't often travel that much.